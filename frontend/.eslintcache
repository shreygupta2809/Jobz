[{"/home/shrey2809/MERN/frontend/src/index.js":"1","/home/shrey2809/MERN/frontend/src/app/App.js":"2","/home/shrey2809/MERN/frontend/src/app/store.js":"3","/home/shrey2809/MERN/frontend/src/components/Main.js":"4","/home/shrey2809/MERN/frontend/src/components/Home.js":"5","/home/shrey2809/MERN/frontend/src/app/rootReducer.js":"6","/home/shrey2809/MERN/frontend/src/components/Login.js":"7","/home/shrey2809/MERN/frontend/src/components/Register.js":"8","/home/shrey2809/MERN/frontend/src/components/Navbar.js":"9","/home/shrey2809/MERN/frontend/src/components/LoginSlice.js":"10","/home/shrey2809/MERN/frontend/src/utils/apiCalls.js":"11","/home/shrey2809/MERN/frontend/src/components/MyAlert.js":"12","/home/shrey2809/MERN/frontend/src/components/Dashboard.js":"13","/home/shrey2809/MERN/frontend/src/components/Profile.js":"14","/home/shrey2809/MERN/frontend/src/components/MyApplication.js":"15"},{"size":211,"mtime":1610629717377,"results":"16","hashOfConfig":"17"},{"size":1721,"mtime":1610874521959,"results":"18","hashOfConfig":"17"},{"size":307,"mtime":1610727530836,"results":"19","hashOfConfig":"17"},{"size":152,"mtime":1610630234019,"results":"20","hashOfConfig":"17"},{"size":162,"mtime":1610630228151,"results":"21","hashOfConfig":"17"},{"size":189,"mtime":1610727511093,"results":"22","hashOfConfig":"17"},{"size":4827,"mtime":1610730479785,"results":"23","hashOfConfig":"17"},{"size":13195,"mtime":1610797187210,"results":"24","hashOfConfig":"17"},{"size":7363,"mtime":1610876331467,"results":"25","hashOfConfig":"17"},{"size":1263,"mtime":1610801229690,"results":"26","hashOfConfig":"17"},{"size":653,"mtime":1610814811721,"results":"27","hashOfConfig":"17"},{"size":651,"mtime":1610730012384,"results":"28","hashOfConfig":"17"},{"size":17394,"mtime":1610876566930,"results":"29","hashOfConfig":"17"},{"size":12685,"mtime":1610801975502,"results":"30","hashOfConfig":"17"},{"size":8043,"mtime":1610884604754,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"6tyclk",{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/shrey2809/MERN/frontend/src/index.js",[],["72","73"],"/home/shrey2809/MERN/frontend/src/app/App.js",["74","75","76","77","78","79"],"import { Provider as StoreProvider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport Profile from '../components/Profile';\nimport Navbar from '../components/Navbar';\nimport Login from '../components/Login';\nimport Register from '../components/Register';\nimport Dashboard from '../components/Dashboard';\nimport MyApplication from '../components/MyApplication';\n\nimport './App.css';\n\nimport store from './store';\n\nfunction App() {\n    return (\n        <StoreProvider store={store}>\n            <Router>\n                <Navbar>\n                    <Switch>\n                        <Route\n                            exact\n                            path=\"/\"\n                            exact\n                            component={() => <Redirect to=\"/login\"></Redirect>}\n                        />\n                        <Route exact path=\"/dashboard\" exact component={Dashboard} />\n                        <Route\n                            exact\n                            path=\"/myapplication\"\n                            exact\n                            component={MyApplication}\n                        />\n                        <Route exact path=\"/login\" exact component={Login} />\n                        <Route exact path=\"/register\" exact component={Register} />\n                        <Route exact path=\"/profile\" exact component={Profile} />\n                        {/* <Route exact path=\"/login\" exact component={Login} />\n                        <Route exact path=\"/navbar\" exact component={Navbar} /> */}\n                    </Switch>\n                </Navbar>\n            </Router>\n        </StoreProvider>\n    );\n}\n\nexport default App;\n","/home/shrey2809/MERN/frontend/src/app/store.js",["80"],"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// import loginReducer from '../components/LoginSlice';\n\nimport rootReducer from './rootReducer';\nconst store = configureStore({\n    reducer: rootReducer,\n    devTools: process.env.NODE_ENV !== 'production'\n});\n\nexport default store;\n","/home/shrey2809/MERN/frontend/src/components/Main.js",[],["81","82"],"/home/shrey2809/MERN/frontend/src/components/Home.js",[],"/home/shrey2809/MERN/frontend/src/app/rootReducer.js",[],"/home/shrey2809/MERN/frontend/src/components/Login.js",["83","84"],"import { React, useState } from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { login } from './LoginSlice';\nimport { signin, signout, signerror } from './LoginSlice';\nimport api from '../utils/apiCalls';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\n// import Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport MyAlert from './MyAlert';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    }\n}));\n\nconst Login = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const login = async (email, password) => {\n        try {\n            const response = await api.post('/api/users/login', {\n                body: { email, password }\n            });\n            const result = response.data;\n            dispatch(signin({ token: result.token, role: result.role }));\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signout());\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    const classes = useStyles();\n\n    const [formData, setFormData] = useState({\n        email: '',\n        password: ''\n    });\n\n    const loggedIn = useSelector(state => state.login.isAuthenticated);\n\n    const role = useSelector(state => state.login.role);\n    const error = useSelector(state => state.login.error);\n\n    if (loggedIn) return <Redirect to=\"/dashboard\" />;\n\n    const onChange = e => {\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const onSubmit = e => {\n        e.preventDefault();\n        login(formData.email, formData.password);\n    };\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            {error && <MyAlert />}\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Log in\n                </Typography>\n                <form onSubmit={onSubmit} className={classes.form} noValidate>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"email\"\n                        label=\"Email Address\"\n                        name=\"email\"\n                        value={formData.email}\n                        autoComplete=\"email\"\n                        onChange={onChange}\n                        autoFocus\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        value={formData.password}\n                        onChange={onChange}\n                        autoComplete=\"current-password\"\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Log In\n                    </Button>\n                    <Grid container>\n                        <Grid item>\n                            <Link to=\"/register\" variant=\"body2\">\n                                {\"Don't have an account? Register Now\"}\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </form>\n            </div>\n            {/* {loggedIn && <Redirect to=\"/dashboard\"></Redirect>} */}\n        </Container>\n    );\n};\n\nexport default Login;\n","/home/shrey2809/MERN/frontend/src/components/Register.js",["85"],"import { React, useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { signin, signout, signerror } from './LoginSlice';\nimport api from '../utils/apiCalls';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport MyAlert from './MyAlert';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '100%'\n        }\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: '100%'\n    },\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    }\n}));\n\nconst Register = () => {\n    const dispatch = useDispatch();\n    const register = async formData => {\n        try {\n            const response = await api.post('/api/users/signup', {\n                body: formData\n            });\n            const result = response.data;\n            dispatch(signin({ token: result.token, role: result.role }));\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signout());\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    const classes = useStyles();\n\n    const [formData, setFormData] = useState({\n        role: '',\n        email: '',\n        password: '',\n        name: '',\n        bio: '',\n        education: [],\n        skill: [],\n        contact: ''\n    });\n\n    const [edu, setEdu] = useState([{ institute: '', startYear: '', endYear: '' }]);\n    const [skill, setSkill] = useState(['']);\n\n    const loggedIn = useSelector(state => state.login.isAuthenticated);\n\n    const role = useSelector(state => state.login.role);\n    const error = useSelector(state => state.login.error);\n\n    if (loggedIn) return <Redirect to=\"/dashboard\" />;\n\n    const onChange = e => {\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const addEduField = () => {\n        setEdu([...edu, { institute: '', startYear: '', endYear: '' }]);\n    };\n\n    const removeEduField = index => {\n        const education = [...edu];\n        education.splice(index, 1);\n        setEdu(education);\n        setFormData({\n            ...formData,\n            education: education\n        });\n    };\n\n    const addSkillField = () => {\n        setSkill([...skill, '']);\n    };\n\n    const removeSkillField = index => {\n        let skills = [...skill];\n        skills.splice(index, 1);\n        setSkill(skills);\n        setFormData({\n            ...formData,\n            skill: skills\n        });\n    };\n\n    const skillChange = (index, event) => {\n        const skills = [...skill];\n        skills[index] = event.target.value;\n        setSkill(skills);\n        setFormData({\n            ...formData,\n            skill: skills\n        });\n    };\n\n    const checkChange = event => {\n        const skills = [...skill];\n        if (event.target.checked) {\n            skills.push(event.target.name);\n        } else {\n            const index = skill.indexOf(event.target.name);\n            skills.splice(index, 1);\n        }\n        setSkill(skills);\n        setFormData({\n            ...formData,\n            skill: skills\n        });\n    };\n\n    const educationChange = (index, event) => {\n        const education = [...edu];\n        education[index][event.target.name] = event.target.value;\n        setEdu(education);\n        setFormData({\n            ...formData,\n            education: education\n        });\n    };\n\n    const checkSkill = ['C', 'Python', 'Java'];\n\n    const onSubmit = e => {\n        e.preventDefault();\n        // console.log(formData);\n        register(formData);\n    };\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            {error && <MyAlert />}\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Register\n                </Typography>\n                <form onSubmit={onSubmit} className={classes.form} noValidate>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel id=\"role\">Role</InputLabel>\n                        <Select\n                            labelId=\"Role\"\n                            id=\"role\"\n                            value={formData.role}\n                            onChange={onChange}\n                            name=\"role\"\n                        >\n                            <MenuItem value={'Applicant'}>Applicant</MenuItem>\n                            <MenuItem value={'Recruiter'}>Recruiter</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"name\"\n                        label=\"Name\"\n                        name=\"name\"\n                        value={formData.name}\n                        autoComplete=\"name\"\n                        onChange={onChange}\n                        autoFocus\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"email\"\n                        label=\"Email Address\"\n                        name=\"email\"\n                        value={formData.email}\n                        autoComplete=\"email\"\n                        onChange={onChange}\n                        autoFocus\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        value={formData.password}\n                        onChange={onChange}\n                        autoComplete=\"current-password\"\n                    />\n                    {formData.role === 'Applicant' && (\n                        <Typography component=\"h1\" variant=\"h6\">\n                            Education\n                        </Typography>\n                    )}\n                    {formData.role === 'Applicant' &&\n                        edu.map((e, index) => (\n                            <div key={index}>\n                                <TextField\n                                    name=\"institute\"\n                                    label=\"Institute\"\n                                    value={e.institute}\n                                    onChange={event => educationChange(index, event)}\n                                />\n                                <TextField\n                                    name=\"startYear\"\n                                    label=\"Start Year\"\n                                    value={e.startYear}\n                                    onChange={event => educationChange(index, event)}\n                                />\n                                <TextField\n                                    name=\"endYear\"\n                                    label=\"End Year\"\n                                    value={e.endYear}\n                                    onChange={event => educationChange(index, event)}\n                                />\n                                <IconButton\n                                    disabled={edu.length === 1}\n                                    onClick={() => removeEduField(index)}\n                                >\n                                    <RemoveIcon />\n                                </IconButton>\n                            </div>\n                        ))}\n                    {formData.role === 'Applicant' && (\n                        <IconButton onClick={addEduField}>\n                            <AddIcon />\n                        </IconButton>\n                    )}\n                    {formData.role === 'Applicant' && (\n                        <Typography component=\"h1\" variant=\"h6\">\n                            Skills\n                        </Typography>\n                    )}\n                    {formData.role === 'Applicant' &&\n                        checkSkill.map(e => (\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={skill.includes(e)}\n                                        onChange={event => checkChange(event)}\n                                        name={e}\n                                    />\n                                }\n                                label={e}\n                            />\n                        ))}\n                    {formData.role === 'Applicant' &&\n                        skill.map((e, index) => (\n                            <div key={index}>\n                                <TextField\n                                    name=\"skill\"\n                                    label=\"Skill\"\n                                    value={e}\n                                    onChange={event => skillChange(index, event)}\n                                />\n                                <IconButton\n                                    disabled={skill.length === 1}\n                                    onClick={() => removeSkillField(index)}\n                                >\n                                    <RemoveIcon />\n                                </IconButton>\n                            </div>\n                        ))}\n                    {formData.role === 'Applicant' && (\n                        <IconButton onClick={addSkillField}>\n                            <AddIcon />\n                        </IconButton>\n                    )}\n                    {formData.role === 'Recruiter' && (\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            fullWidth\n                            id=\"bio\"\n                            label=\"Bio\"\n                            name=\"bio\"\n                            value={formData.bio}\n                            autoComplete=\"bio\"\n                            onChange={onChange}\n                            autoFocus\n                        />\n                    )}\n                    {formData.role === 'Recruiter' && (\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            fullWidth\n                            name=\"contact\"\n                            label=\"Contact\"\n                            type=\"number\"\n                            id=\"contact\"\n                            value={formData.contact}\n                            onChange={onChange}\n                        />\n                    )}\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Register\n                    </Button>\n                    <Grid container>\n                        <Grid item>\n                            <Link to=\"/login\" variant=\"body2\">\n                                {'Already have an account? Login Now'}\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </form>\n            </div>\n        </Container>\n    );\n};\n\nexport default Register;\n","/home/shrey2809/MERN/frontend/src/components/Navbar.js",["86","87"],"import React from 'react';\nimport { Link, Redirect, Switch } from 'react-router-dom';\nimport { signout } from './LoginSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport PersonIcon from '@material-ui/icons/Person';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport LockIcon from '@material-ui/icons/Lock';\nimport WorkIcon from '@material-ui/icons/Work';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport GroupIcon from '@material-ui/icons/Group';\nimport DescriptionIcon from '@material-ui/icons/Description';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex'\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        })\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen\n        })\n    },\n    menuButton: {\n        marginRight: 36\n    },\n    hide: {\n        display: 'none'\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        whiteSpace: 'nowrap'\n    },\n    drawerOpen: {\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen\n        })\n    },\n    drawerClose: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        }),\n        overflowX: 'hidden',\n        width: theme.spacing(7) + 1,\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9) + 1\n        }\n    },\n    toolbar: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: theme.spacing(0, 1),\n        ...theme.mixins.toolbar\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3)\n    }\n}));\n\nconst Navbar = ({ children }) => {\n    const loggedIn = useSelector(state => state.login.isAuthenticated);\n    const role = useSelector(state => state.login.role);\n\n    const dispatch = useDispatch();\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(false);\n\n    const onClick = e => {\n        e.preventDefault();\n        dispatch(signout());\n    };\n    // if (!loggedIn) return <Redirect to=\"/login\" />;\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    let links = [];\n\n    if (!loggedIn) {\n        links = [\n            { title: 'Login', to: '/login', icon: <LockOpenIcon /> },\n            { title: 'Register', to: '/register', icon: <PersonAddIcon /> }\n        ];\n    } else {\n        if (role === 'Applicant') {\n            links = [\n                { title: 'Jobs', to: '/dashboard', icon: <DashboardIcon /> },\n                { title: 'My Applications', to: '/myapplication', icon: <DescriptionIcon /> },\n                { title: 'Profile', to: '/profile', icon: <PersonIcon /> }\n            ];\n        } else if (role === 'Recruiter') {\n            links = [\n                { title: 'My Jobs', to: '/', icon: <WorkIcon /> },\n                { title: 'My Employees', to: '/', icon: <GroupIcon /> },\n                { title: 'Profile', to: '/profile', icon: <PersonIcon /> }\n            ];\n        }\n    }\n\n    let logoutRender;\n    if (loggedIn) {\n        logoutRender = (\n            <ListItem button onClick={onClick} key=\"Logout\" component={Link} to=\"/login\">\n                <ListItemIcon>\n                    <LockIcon />{' '}\n                </ListItemIcon>\n                <ListItemText primary=\"Logout\" />\n            </ListItem>\n        );\n    }\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open\n                })}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(classes.menuButton, {\n                            [classes.hide]: open\n                        })}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        Jobz\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                className={clsx(classes.drawer, {\n                    [classes.drawerOpen]: open,\n                    [classes.drawerClose]: !open\n                })}\n                classes={{\n                    paper: clsx({\n                        [classes.drawerOpen]: open,\n                        [classes.drawerClose]: !open\n                    })\n                }}\n            >\n                <div className={classes.toolbar}>\n                    <IconButton onClick={handleDrawerClose}>\n                        {theme.direction === 'rtl' ? (\n                            <ChevronRightIcon />\n                        ) : (\n                            <ChevronLeftIcon />\n                        )}\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>\n                    {links.map(link => (\n                        <ListItem button key={link.title} component={Link} to={link.to}>\n                            <ListItemIcon>{link.icon}</ListItemIcon>\n                            <ListItemText primary={link.title} />\n                        </ListItem>\n                    ))}\n                    {logoutRender}\n                </List>\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.toolbar} />\n                {children}\n            </main>\n        </div>\n    );\n};\n\nexport default Navbar;\n","/home/shrey2809/MERN/frontend/src/components/LoginSlice.js",[],"/home/shrey2809/MERN/frontend/src/utils/apiCalls.js",["88"],"import axios from 'axios';\n\nexport default {\n    get(url, payload) {\n        if (payload)\n            return axios.get(url, {\n                params: {\n                    source_content_type: 'application/json',\n                    source: JSON.stringify(payload.query)\n                }\n            });\n        return axios.get(url);\n    },\n    post(url, payload = {}) {\n        return axios.post(url, payload.body);\n    },\n    put(url, payload = {}) {\n        return axios.put(url, payload.body);\n    },\n    patch(url, payload = {}) {\n        return axios.patch(url, payload.body);\n    },\n    delete(url) {\n        return axios.delete(url);\n    }\n};\n","/home/shrey2809/MERN/frontend/src/components/MyAlert.js",[],"/home/shrey2809/MERN/frontend/src/components/Dashboard.js",["89","90","91","92"],"import { React, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { signerror, signnoerror } from './LoginSlice';\nimport api from '../utils/apiCalls';\nimport MyAlert from './MyAlert';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { DataGrid } from '@material-ui/data-grid';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\nimport Select from '@material-ui/core/Select';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n// function getRecruiterName(params) {\n//     return params.getValue('recruiter').name;\n// }\n\n// function getDeadline(params) {\n//     var localDate = new Date(params.getValue('deadline'));\n//     return localDate.toDateString();\n// }\n\n// function getDuration(params) {\n//     const dur = params.getValue('duration');\n//     if (dur) return `${dur} Months`;\n//     else return 'Indefinite';\n// }\n\n// function applyButton(params) {\n//     let applied = params.getValue('applied');\n//     const full = params.getValue('full');\n//     if (applied === 'Apply' && !full) {\n//         return (\n//             <strong>\n//                 <Button\n//                     variant=\"contained\"\n//                     color=\"primary\"\n//                     size=\"small\"\n//                     onClick={() => console.log(params.getValue('id'))}\n//                     style={{ marginLeft: 16 }}\n//                 >\n//                     Apply\n//                 </Button>\n//             </strong>\n//         );\n//     }\n//     return (\n//         <strong>\n//             <Button\n//                 variant=\"contained\"\n//                 size=\"small\"\n//                 color=\"primary\"\n//                 disabled\n//                 style={{ marginLeft: 16 }}\n//             >\n//                 {applied === 'Applied' ? 'Applied' : 'Full'}\n//             </Button>\n//         </strong>\n//     );\n// }\n\n// const columns = [\n//     {\n//         field: 'title',\n//         headerName: 'Title',\n//         width: 150,\n//         sortable: false\n//     },\n//     {\n//         field: 'type',\n//         headerName: 'Type',\n//         width: 150,\n//         sortable: false\n//     },\n//     {\n//         field: 'recuiter',\n//         headerName: 'Recruiter',\n//         width: 150,\n//         valueGetter: getRecruiterName,\n//         sortable: false\n//     },\n//     {\n//         field: 'salary',\n//         headerName: 'Salary',\n//         sortable: false\n//     },\n//     {\n//         field: 'duration',\n//         headerName: 'Duration',\n//         width: 150,\n//         valueFormatter: getDuration,\n//         sortable: false\n//     },\n//     {\n//         field: 'deadline',\n//         headerName: 'Deadline',\n//         width: 150,\n//         valueFormatter: getDeadline,\n//         sortable: false\n//     },\n//     {\n//         field: 'avgRating',\n//         headerName: 'Rating',\n//         sortable: false\n//     },\n//     {\n//         field: 'apply',\n//         headerName: 'Apply',\n//         renderCell: applyButton,\n//         width: 150,\n//         sortable: false\n//     }\n// ];\n\nconst Dashboard = () => {\n    const dispatch = useDispatch();\n    const loggedIn = useSelector(state => state.login.isAuthenticated);\n    const error = useSelector(state => state.login.error);\n    const [jobs, setJobs] = useState(undefined);\n\n    const [filter, setFilter] = useState({\n        jobType: '',\n        duration: '',\n        salary: ''\n    });\n    const [sorts, setSort] = useState({\n        sortDuration: '',\n        sortRating: '',\n        sortSalary: ''\n    });\n\n    const [maxSal, setMaxSal] = useState('');\n    const [minSal, setMinSal] = useState('');\n    const [sop, setSop] = useState('');\n    const [url, setUrl] = useState('/api/applicant');\n    const [open, setOpen] = useState(false);\n    const [id, setId] = useState('');\n\n    const handleClose = () => {\n        setOpen(false);\n        setSop('');\n        setId('');\n    };\n\n    function getRecruiterName(params) {\n        return params.getValue('recruiter').name;\n    }\n\n    function getDeadline(params) {\n        var localDate = new Date(params.getValue('deadline'));\n        return localDate.toDateString();\n    }\n\n    function getDuration(params) {\n        const dur = params.getValue('duration');\n        if (dur) return `${dur} Months`;\n        else return 'Indefinite';\n    }\n\n    const applyJob = async () => {\n        setOpen(false);\n        console.log(id, sop);\n        try {\n            const response = await api.post(`/api/jobs/${id}`, { body: { sop } });\n            const result = response.data.data.data;\n            const jobID = result.job;\n            let jobz = [...jobs];\n            jobz.forEach(job => {\n                if (job.id === jobID) {\n                    job.applied = 'Applied';\n                }\n            });\n            setJobs(jobz);\n            dispatch(signnoerror());\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    function renderSop(id) {\n        setOpen(true);\n        setSop('');\n        setId(id);\n    }\n\n    function applyButton(params) {\n        let applied = params.getValue('applied');\n        const full = params.getValue('full');\n        if (applied === 'Apply' && !full) {\n            return (\n                <strong>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"small\"\n                        onClick={() => renderSop(params.getValue('id'))}\n                        style={{ marginLeft: 16 }}\n                    >\n                        Apply\n                    </Button>\n                </strong>\n            );\n        }\n        return (\n            <strong>\n                <Button\n                    variant=\"contained\"\n                    size=\"small\"\n                    color=\"primary\"\n                    disabled\n                    style={{ marginLeft: 16 }}\n                >\n                    {applied === 'Applied' ? 'Applied' : 'Full'}\n                </Button>\n            </strong>\n        );\n    }\n\n    const columns = [\n        {\n            field: 'title',\n            headerName: 'Title',\n            width: 150,\n            sortable: false\n        },\n        {\n            field: 'type',\n            headerName: 'Type',\n            width: 150,\n            sortable: false\n        },\n        {\n            field: 'recuiter',\n            headerName: 'Recruiter',\n            width: 150,\n            valueGetter: getRecruiterName,\n            sortable: false\n        },\n        {\n            field: 'salary',\n            headerName: 'Salary',\n            width: 150,\n            sortable: false\n        },\n        {\n            field: 'duration',\n            headerName: 'Duration',\n            width: 150,\n            valueFormatter: getDuration,\n            sortable: false\n        },\n        {\n            field: 'deadline',\n            headerName: 'Deadline',\n            width: 150,\n            valueFormatter: getDeadline,\n            sortable: false\n        },\n        {\n            field: 'avgRating',\n            headerName: 'Rating',\n            width: 150,\n            sortable: false\n        },\n        {\n            field: 'apply',\n            headerName: 'Apply',\n            renderCell: applyButton,\n            width: 150,\n            sortable: false\n        }\n    ];\n\n    const getAllJobs = async () => {\n        try {\n            const res = await axios.get(url);\n            let result = res.data.data.data;\n            result.forEach(job => {\n                job.id = job._id;\n            });\n            setJobs(result);\n            dispatch(signnoerror());\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n    const history = useHistory();\n\n    useEffect(() => {\n        if (!loggedIn) history.push('/login');\n        else getAllJobs();\n    }, [loggedIn, url]);\n\n    const filterJobs = e => {\n        setUrl(\n            `/api/applicant?jobType=${filter.jobType}&salary=${filter.salary}&duration=${filter.duration}`\n        );\n        setSort({\n            sortDuration: '',\n            sortRating: '',\n            sortSalary: ''\n        });\n    };\n\n    const sortJObs = e => {\n        let jobsss = [...jobs];\n        jobsss.sort((job1, job2) => {\n            if (sorts.sortDuration) {\n                if (job1.duration < job2.duration)\n                    return sorts.sortDuration === 'Asc' ? -1 : 1;\n                if (job1.duration > job2.duration)\n                    return sorts.sortDuration === 'Asc' ? 1 : -1;\n            }\n            if (sorts.sortSalary) {\n                if (job1.salary < job2.salary) return sorts.sortSalary === 'Asc' ? -1 : 1;\n                if (job1.salary > job2.salary) return sorts.sortSalary === 'Asc' ? 1 : -1;\n            }\n            if (sorts.sortRating) {\n                if (job1.avgRating < job2.avgRating)\n                    return sorts.sortRating === 'Asc' ? -1 : 1;\n                if (job1.avgRating > job2.avgRating)\n                    return sorts.sortRating === 'Asc' ? 1 : -1;\n            }\n        });\n        setJobs(jobsss);\n    };\n\n    const onChange = e => {\n        setFilter({\n            ...filter,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const sortsChange = e => {\n        setSort({\n            ...sorts,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const sopChange = e => {\n        setSop(e.target.value);\n    };\n\n    const minSalaryChange = e => {\n        setMinSal(e.target.value);\n        const minmaxsal = [e.target.value, maxSal].join('-');\n        setFilter({\n            ...filter,\n            salary: minmaxsal\n        });\n    };\n\n    const maxSalaryChange = (e, newValue) => {\n        setMaxSal(e.target.value);\n        const minmaxsal = [minSal, e.target.value].join('-');\n        setFilter({\n            ...filter,\n            salary: minmaxsal\n        });\n    };\n\n    if (!jobs) {\n        return <h1>loading</h1>;\n    }\n\n    return (\n        <>\n            {error && <MyAlert />}\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n                fullWidth\n            >\n                <DialogTitle id=\"form-dialog-title\">Enter SOP</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        id=\"outlined-textarea\"\n                        label=\"Sop\"\n                        placeholder=\"Placeholder\"\n                        multiline\n                        variant=\"outlined\"\n                        fullWidth\n                        name=\"sop\"\n                        value={sop}\n                        onChange={sopChange}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={applyJob} color=\"primary\">\n                        Apply\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <div style={{ height: 400, width: '100%' }}>\n                <DataGrid\n                    rows={jobs ? jobs : []}\n                    columns={columns.map(column => ({\n                        ...column,\n                        disableClickEventBubbling: true\n                    }))}\n                    disableColumnMenu=\"true\"\n                />\n            </div>\n            <div style={{ marginTop: '25px', marginLeft: '15px', marginRight: '15px' }}>\n                <Grid container spacing={3}>\n                    <Grid item xs={3}>\n                        <InputLabel id=\"jobType\">Job Type</InputLabel>\n                        <Select\n                            labelId=\"jobType\"\n                            id=\"jobType\"\n                            value={filter.jobType}\n                            onChange={onChange}\n                            name=\"jobType\"\n                            style={{ width: '100%' }}\n                        >\n                            <MenuItem value={''}>Remove</MenuItem>\n                            <MenuItem value={'Full-Time'}>Full Time</MenuItem>\n                            <MenuItem value={'Part-Time'}>Part Time</MenuItem>\n                            <MenuItem value={'Work-From-Home'}>Work From Home</MenuItem>\n                        </Select>\n                    </Grid>\n                    <Grid item xs={1}>\n                        <TextField\n                            id=\"standard-basic\"\n                            label=\"Min\"\n                            value={minSal}\n                            onChange={minSalaryChange}\n                        />\n                    </Grid>\n                    <Grid item xs={1}>\n                        <TextField\n                            id=\"standard-basic\"\n                            label=\"Max\"\n                            value={maxSal}\n                            onChange={maxSalaryChange}\n                        />\n                    </Grid>\n                    <Grid item xs={3}>\n                        <InputLabel id=\"duration\">Duration</InputLabel>\n                        <Select\n                            labelId=\"duration\"\n                            id=\"duration\"\n                            value={filter.duration}\n                            onChange={onChange}\n                            name=\"duration\"\n                            style={{ width: '100%' }}\n                        >\n                            <MenuItem value={''}>Remove</MenuItem>\n                            <MenuItem value={'1'}>1</MenuItem>\n                            <MenuItem value={'2'}>2</MenuItem>\n                            <MenuItem value={'3'}>3</MenuItem>\n                            <MenuItem value={'4'}>4</MenuItem>\n                            <MenuItem value={'5'}>5</MenuItem>\n                            <MenuItem value={'6'}>6</MenuItem>\n                            <MenuItem value={'7'}>7</MenuItem>\n                        </Select>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <Button onClick={filterJobs}>Filter</Button>\n                    </Grid>\n                </Grid>\n                <Grid container spacing={3}>\n                    <Grid item xs={3}>\n                        <InputLabel id=\"sortDuration\">Sort Duration By:</InputLabel>\n                        <Select\n                            labelId=\"sortDuration\"\n                            id=\"sortDuration\"\n                            value={sorts.sortDuration}\n                            onChange={sortsChange}\n                            name=\"sortDuration\"\n                            style={{ width: '100%' }}\n                        >\n                            <MenuItem value={''}>Unsort</MenuItem>\n                            <MenuItem value={'Asc'}>Ascending</MenuItem>\n                            <MenuItem value={'Des'}>Descending</MenuItem>\n                        </Select>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <InputLabel id=\"sortSalary\">Sort Salary By:</InputLabel>\n                        <Select\n                            labelId=\"sortSalary\"\n                            id=\"sortSalary\"\n                            value={sorts.sortSalary}\n                            onChange={sortsChange}\n                            name=\"sortSalary\"\n                            style={{ width: '100%' }}\n                        >\n                            <MenuItem value={''}>Unsort</MenuItem>\n                            <MenuItem value={'Asc'}>Ascending</MenuItem>\n                            <MenuItem value={'Des'}>Descending</MenuItem>\n                        </Select>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <InputLabel id=\"sortRating\">Sort Rating By:</InputLabel>\n                        <Select\n                            labelId=\"sortRating\"\n                            id=\"sortRating\"\n                            value={sorts.sortRating}\n                            onChange={sortsChange}\n                            name=\"sortRating\"\n                            style={{ width: '100%' }}\n                        >\n                            <MenuItem value={''}>Unsort</MenuItem>\n                            <MenuItem value={'Asc'}>Ascending</MenuItem>\n                            <MenuItem value={'Des'}>Descending</MenuItem>\n                        </Select>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <Button onClick={sortJObs}>Sort</Button>\n                    </Grid>\n                </Grid>\n            </div>\n        </>\n    );\n};\n\nexport default Dashboard;\n","/home/shrey2809/MERN/frontend/src/components/Profile.js",["93","94","95","96","97","98"],"import { React, useState, useEffect } from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { signin, signout, signerror, signnoerror } from './LoginSlice';\nimport api from '../utils/apiCalls';\nimport axios from 'axios';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport PersonIcon from '@material-ui/icons/Person';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport MyAlert from './MyAlert';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '100%'\n        }\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: '100%'\n    },\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    }\n}));\n\nconst Profile = () => {\n    const dispatch = useDispatch();\n\n    const loggedIn = useSelector(state => state.login.isAuthenticated);\n\n    const role = useSelector(state => state.login.role);\n    const error = useSelector(state => state.login.error);\n\n    const [loading, setLoading] = useState(false);\n    const [upd, setUpd] = useState(false);\n\n    const update = async formData => {\n        try {\n            const response = await api.patch('/api/users/update', {\n                body: formData\n            });\n            const result = response.data;\n            dispatch(signnoerror());\n            setUpd(!upd);\n        } catch (err) {\n            setUpd(!upd);\n            const message = err.response.data.errors[0].msg;\n            // dispatch(signout());\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    const classes = useStyles();\n\n    const [formData, setFormData] = useState({\n        role: '',\n        email: '',\n        password: '',\n        name: '',\n        bio: '',\n        education: [],\n        skill: [],\n        contact: ''\n    });\n\n    const [edu, setEdu] = useState([{ institute: '', startYear: '', endYear: '' }]);\n    const [skill, setSkill] = useState(['']);\n\n    const getMe = async () => {\n        setLoading(true);\n        const res = await axios.get(`/api/users/`);\n        console.log(res);\n        const result = res.data.data.data;\n        console.log(result);\n        setFormData(result);\n        setEdu(result.education);\n        setSkill(result.skill);\n        setLoading(false);\n    };\n    const history = useHistory();\n\n    useEffect(() => {\n        if (!loggedIn) history.push('/login');\n        else getMe();\n    }, [loggedIn, upd]);\n\n    // if (!loggedIn) return <Redirect to=\"/login\" />;\n\n    const onChange = e => {\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const addEduField = () => {\n        setEdu([...edu, { institute: '', startYear: '', endYear: '' }]);\n    };\n\n    const removeEduField = index => {\n        const education = [...edu];\n        education.splice(index, 1);\n        setEdu(education);\n        setFormData({\n            ...formData,\n            education: education\n        });\n    };\n\n    const addSkillField = () => {\n        setSkill([...skill, '']);\n    };\n\n    const removeSkillField = index => {\n        let skills = [...skill];\n        skills.splice(index, 1);\n        setSkill(skills);\n        setFormData({\n            ...formData,\n            skill: skills\n        });\n    };\n\n    const skillChange = (index, event) => {\n        const skills = [...skill];\n        skills[index] = event.target.value;\n        setSkill(skills);\n        setFormData({\n            ...formData,\n            skill: skills\n        });\n    };\n\n    const checkChange = event => {\n        const skills = [...skill];\n        if (event.target.checked) {\n            skills.push(event.target.name);\n        } else {\n            const index = skill.indexOf(event.target.name);\n            skills.splice(index, 1);\n        }\n        setSkill(skills);\n        setFormData({\n            ...formData,\n            skill: skills\n        });\n    };\n\n    const educationChange = (index, event) => {\n        const education = [...edu];\n        education[index][event.target.name] = event.target.value;\n        setEdu(education);\n        setFormData({\n            ...formData,\n            education: education\n        });\n    };\n\n    const checkSkill = ['C', 'Python', 'Java'];\n\n    const onSubmit = e => {\n        e.preventDefault();\n        console.log(formData);\n        update(formData);\n    };\n    if (loading) {\n        return <h1>loading</h1>;\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            {error && <MyAlert />}\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <PersonIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Profile\n                </Typography>\n                <form onSubmit={onSubmit} className={classes.form} noValidate>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"name\"\n                        label=\"Name\"\n                        name=\"name\"\n                        value={formData.name}\n                        autoComplete=\"name\"\n                        onChange={onChange}\n                        autoFocus\n                    />\n                    <TextField\n                        disabled\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"email\"\n                        label=\"Email Address\"\n                        name=\"email\"\n                        value={formData.email}\n                        autoComplete=\"email\"\n                        onChange={onChange}\n                        autoFocus\n                    />\n                    <TextField\n                        disabled\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        value={formData.password}\n                        onChange={onChange}\n                        autoComplete=\"current-password\"\n                    />\n                    {role === 'Applicant' && (\n                        <Typography component=\"h1\" variant=\"h6\">\n                            Education\n                        </Typography>\n                    )}\n                    {role === 'Applicant' &&\n                        edu.map((e, index) => (\n                            <div key={index}>\n                                <TextField\n                                    name=\"institute\"\n                                    label=\"Institute\"\n                                    value={e.institute}\n                                    onChange={event => educationChange(index, event)}\n                                />\n                                <TextField\n                                    name=\"startYear\"\n                                    label=\"Start Year\"\n                                    value={e.startYear}\n                                    onChange={event => educationChange(index, event)}\n                                />\n                                <TextField\n                                    name=\"endYear\"\n                                    label=\"End Year\"\n                                    value={e.endYear}\n                                    onChange={event => educationChange(index, event)}\n                                />\n                                <IconButton\n                                    disabled={edu.length === 1}\n                                    onClick={() => removeEduField(index)}\n                                >\n                                    <RemoveIcon />\n                                </IconButton>\n                            </div>\n                        ))}\n                    {role === 'Applicant' && (\n                        <IconButton onClick={addEduField}>\n                            <AddIcon />\n                        </IconButton>\n                    )}\n                    {role === 'Applicant' && (\n                        <Typography component=\"h1\" variant=\"h6\">\n                            Skills\n                        </Typography>\n                    )}\n                    {role === 'Applicant' &&\n                        checkSkill.map(e => (\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={skill.includes(e)}\n                                        onChange={event => checkChange(event)}\n                                        name={e}\n                                    />\n                                }\n                                label={e}\n                            />\n                        ))}\n                    {role === 'Applicant' &&\n                        skill.map((e, index) => (\n                            <div key={index}>\n                                <TextField\n                                    name=\"skill\"\n                                    label=\"Skill\"\n                                    value={e}\n                                    onChange={event => skillChange(index, event)}\n                                />\n                                <IconButton\n                                    disabled={skill.length === 1}\n                                    onClick={() => removeSkillField(index)}\n                                >\n                                    <RemoveIcon />\n                                </IconButton>\n                            </div>\n                        ))}\n                    {role === 'Applicant' && (\n                        <IconButton onClick={addSkillField}>\n                            <AddIcon />\n                        </IconButton>\n                    )}\n                    {role === 'Recruiter' && (\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            fullWidth\n                            id=\"bio\"\n                            label=\"Bio\"\n                            name=\"bio\"\n                            value={formData.bio}\n                            autoComplete=\"bio\"\n                            onChange={onChange}\n                            autoFocus\n                        />\n                    )}\n                    {role === 'Recruiter' && (\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            fullWidth\n                            name=\"contact\"\n                            label=\"Contact\"\n                            type=\"number\"\n                            id=\"contact\"\n                            value={formData.contact}\n                            onChange={onChange}\n                        />\n                    )}\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Update\n                    </Button>\n                </form>\n            </div>\n        </Container>\n    );\n};\n\nexport default Profile;\n","/home/shrey2809/MERN/frontend/src/components/MyApplication.js",["99","100","101","102","103"],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":23,"column":29,"nodeType":"110","endLine":23,"endColumn":34},{"ruleId":"108","severity":1,"message":"109","line":26,"column":56,"nodeType":"110","endLine":26,"endColumn":61},{"ruleId":"108","severity":1,"message":"109","line":30,"column":29,"nodeType":"110","endLine":30,"endColumn":34},{"ruleId":"108","severity":1,"message":"109","line":33,"column":52,"nodeType":"110","endLine":33,"endColumn":57},{"ruleId":"108","severity":1,"message":"109","line":34,"column":55,"nodeType":"110","endLine":34,"endColumn":60},{"ruleId":"108","severity":1,"message":"109","line":35,"column":54,"nodeType":"110","endLine":35,"endColumn":59},{"ruleId":"111","severity":1,"message":"112","line":1,"column":26,"nodeType":"113","messageId":"114","endLine":1,"endColumn":46},{"ruleId":"104","replacedBy":"115"},{"ruleId":"106","replacedBy":"116"},{"ruleId":"111","severity":1,"message":"117","line":42,"column":11,"nodeType":"113","messageId":"114","endLine":42,"endColumn":18},{"ruleId":"111","severity":1,"message":"118","line":67,"column":11,"nodeType":"113","messageId":"114","endLine":67,"endColumn":15},{"ruleId":"111","severity":1,"message":"118","line":92,"column":11,"nodeType":"113","messageId":"114","endLine":92,"endColumn":15},{"ruleId":"111","severity":1,"message":"119","line":2,"column":16,"nodeType":"113","messageId":"114","endLine":2,"endColumn":24},{"ruleId":"111","severity":1,"message":"120","line":2,"column":26,"nodeType":"113","messageId":"114","endLine":2,"endColumn":32},{"ruleId":"121","severity":1,"message":"122","line":3,"column":1,"nodeType":"123","endLine":26,"endColumn":3},{"ruleId":"111","severity":1,"message":"124","line":3,"column":10,"nodeType":"113","messageId":"114","endLine":3,"endColumn":14},{"ruleId":"111","severity":1,"message":"119","line":3,"column":16,"nodeType":"113","messageId":"114","endLine":3,"endColumn":24},{"ruleId":"125","severity":1,"message":"126","line":303,"column":8,"nodeType":"127","endLine":303,"endColumn":23,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":318,"column":34,"nodeType":"131","messageId":"132","endLine":318,"endColumn":36},{"ruleId":"111","severity":1,"message":"124","line":2,"column":10,"nodeType":"113","messageId":"114","endLine":2,"endColumn":14},{"ruleId":"111","severity":1,"message":"119","line":2,"column":16,"nodeType":"113","messageId":"114","endLine":2,"endColumn":24},{"ruleId":"111","severity":1,"message":"133","line":4,"column":10,"nodeType":"113","messageId":"114","endLine":4,"endColumn":16},{"ruleId":"111","severity":1,"message":"134","line":4,"column":18,"nodeType":"113","messageId":"114","endLine":4,"endColumn":25},{"ruleId":"111","severity":1,"message":"135","line":69,"column":19,"nodeType":"113","messageId":"114","endLine":69,"endColumn":25},{"ruleId":"125","severity":1,"message":"136","line":113,"column":8,"nodeType":"127","endLine":113,"endColumn":23,"suggestions":"137"},{"ruleId":"111","severity":1,"message":"124","line":3,"column":10,"nodeType":"113","messageId":"114","endLine":3,"endColumn":14},{"ruleId":"111","severity":1,"message":"119","line":3,"column":16,"nodeType":"113","messageId":"114","endLine":3,"endColumn":24},{"ruleId":"111","severity":1,"message":"138","line":19,"column":8,"nodeType":"113","messageId":"114","endLine":19,"endColumn":17},{"ruleId":"111","severity":1,"message":"139","line":63,"column":19,"nodeType":"113","messageId":"114","endLine":63,"endColumn":27},{"ruleId":"125","severity":1,"message":"140","line":204,"column":8,"nodeType":"127","endLine":204,"endColumn":27,"suggestions":"141"},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'getDefaultMiddleware' is defined but never used.","Identifier","unusedVar",["142"],["143"],"'history' is assigned a value but never used.","'role' is assigned a value but never used.","'Redirect' is defined but never used.","'Switch' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getAllJobs' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["144"],"array-callback-return","Array.prototype.sort() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'signin' is defined but never used.","'signout' is defined but never used.","'result' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["145"],"'FormLabel' is defined but never used.","'response' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getMyApps' and 'history'. Either include them or remove the dependency array.",["146"],"no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},"Update the dependencies array to be: [getAllJobs, history, loggedIn, url]",{"range":"153","text":"154"},"Update the dependencies array to be: [history, loggedIn, upd]",{"range":"155","text":"156"},"Update the dependencies array to be: [loggedIn, hasrate, history, getMyApps]",{"range":"157","text":"158"},[8463,8478],"[getAllJobs, history, loggedIn, url]",[3396,3411],"[history, loggedIn, upd]",[5930,5949],"[loggedIn, hasrate, history, getMyApps]"]