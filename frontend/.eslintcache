[{"/home/shrey2809/MERN/frontend/src/index.js":"1","/home/shrey2809/MERN/frontend/src/app/App.js":"2","/home/shrey2809/MERN/frontend/src/app/store.js":"3","/home/shrey2809/MERN/frontend/src/components/Main.js":"4","/home/shrey2809/MERN/frontend/src/components/Home.js":"5","/home/shrey2809/MERN/frontend/src/app/rootReducer.js":"6","/home/shrey2809/MERN/frontend/src/components/Login.js":"7","/home/shrey2809/MERN/frontend/src/components/Register.js":"8","/home/shrey2809/MERN/frontend/src/components/Navbar.js":"9","/home/shrey2809/MERN/frontend/src/components/LoginSlice.js":"10","/home/shrey2809/MERN/frontend/src/utils/apiCalls.js":"11","/home/shrey2809/MERN/frontend/src/components/MyAlert.js":"12","/home/shrey2809/MERN/frontend/src/components/Dashboard.js":"13","/home/shrey2809/MERN/frontend/src/components/Profile.js":"14","/home/shrey2809/MERN/frontend/src/components/MyApplication.js":"15","/home/shrey2809/MERN/frontend/src/components/MyJobs.js":"16","/home/shrey2809/MERN/frontend/src/components/Employees.js":"17","/home/shrey2809/MERN/frontend/src/components/Application.js":"18"},{"size":211,"mtime":1610629717377,"results":"19","hashOfConfig":"20"},{"size":1944,"mtime":1611036257406,"results":"21","hashOfConfig":"20"},{"size":307,"mtime":1610727530836,"results":"22","hashOfConfig":"20"},{"size":152,"mtime":1610630234019,"results":"23","hashOfConfig":"20"},{"size":162,"mtime":1610630228151,"results":"24","hashOfConfig":"20"},{"size":189,"mtime":1610727511093,"results":"25","hashOfConfig":"20"},{"size":4927,"mtime":1610940962419,"results":"26","hashOfConfig":"20"},{"size":13295,"mtime":1610976982425,"results":"27","hashOfConfig":"20"},{"size":7450,"mtime":1610965279382,"results":"28","hashOfConfig":"20"},{"size":1263,"mtime":1610801229690,"results":"29","hashOfConfig":"20"},{"size":653,"mtime":1610814811721,"results":"30","hashOfConfig":"20"},{"size":651,"mtime":1610730012384,"results":"31","hashOfConfig":"20"},{"size":16302,"mtime":1611565384294,"results":"32","hashOfConfig":"20"},{"size":12694,"mtime":1611306601155,"results":"33","hashOfConfig":"20"},{"size":8158,"mtime":1611385914824,"results":"34","hashOfConfig":"20"},{"size":19429,"mtime":1611385952351,"results":"35","hashOfConfig":"20"},{"size":11711,"mtime":1611385985019,"results":"36","hashOfConfig":"20"},{"size":12352,"mtime":1611386047406,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"6tyclk",{"filePath":"41","messages":"42","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"40"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"40"},"/home/shrey2809/MERN/frontend/src/index.js",[],["87","88"],"/home/shrey2809/MERN/frontend/src/app/App.js",["89","90","91","92","93","94","95","96","97"],"import { Provider as StoreProvider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport Profile from '../components/Profile';\nimport Navbar from '../components/Navbar';\nimport Login from '../components/Login';\nimport Register from '../components/Register';\nimport Dashboard from '../components/Dashboard';\nimport MyApplication from '../components/MyApplication';\nimport MyJobs from '../components/MyJobs';\nimport Employees from '../components/Employees';\nimport Application from '../components/Application';\n\nimport './App.css';\n\nimport store from './store';\n\nfunction App() {\n    return (\n        <StoreProvider store={store}>\n            <Router>\n                <Navbar>\n                    <Switch>\n                        <Route\n                            exact\n                            path=\"/\"\n                            exact\n                            component={() => <Redirect to=\"/login\"></Redirect>}\n                        />\n                        <Route exact path=\"/dashboard\" exact component={Dashboard} />\n                        <Route\n                            exact\n                            path=\"/myapplication\"\n                            exact\n                            component={MyApplication}\n                        />\n                        <Route exact path=\"/login\" exact component={Login} />\n                        <Route exact path=\"/register\" exact component={Register} />\n                        <Route exact path=\"/profile\" exact component={Profile} />\n                        <Route exact path=\"/myjobs\" exact component={MyJobs} />\n                        <Route exact path=\"/myemp\" exact component={Employees} />\n                        <Route exact path=\"/app\" exact component={Application} />\n                    </Switch>\n                </Navbar>\n            </Router>\n        </StoreProvider>\n    );\n}\n\nexport default App;\n","/home/shrey2809/MERN/frontend/src/app/store.js",["98"],"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// import loginReducer from '../components/LoginSlice';\n\nimport rootReducer from './rootReducer';\nconst store = configureStore({\n    reducer: rootReducer,\n    devTools: process.env.NODE_ENV !== 'production'\n});\n\nexport default store;\n","/home/shrey2809/MERN/frontend/src/components/Main.js",[],["99","100"],"/home/shrey2809/MERN/frontend/src/components/Home.js",[],"/home/shrey2809/MERN/frontend/src/app/rootReducer.js",[],"/home/shrey2809/MERN/frontend/src/components/Login.js",["101"],"import { React, useState } from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { login } from './LoginSlice';\nimport { signin, signout, signerror } from './LoginSlice';\nimport api from '../utils/apiCalls';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\n// import Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport MyAlert from './MyAlert';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    }\n}));\n\nconst Login = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const login = async (email, password) => {\n        try {\n            const response = await api.post('/api/users/login', {\n                body: { email, password }\n            });\n            const result = response.data;\n            dispatch(signin({ token: result.token, role: result.role }));\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signout());\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    const classes = useStyles();\n\n    const [formData, setFormData] = useState({\n        email: '',\n        password: ''\n    });\n\n    const loggedIn = useSelector(state => state.login.isAuthenticated);\n\n    const role = useSelector(state => state.login.role);\n    const error = useSelector(state => state.login.error);\n\n    if (loggedIn && role === 'Applicant') return <Redirect to=\"/dashboard\" />;\n    if (loggedIn && role === 'Recruiter') return <Redirect to=\"/myjobs\" />;\n\n    const onChange = e => {\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const onSubmit = e => {\n        e.preventDefault();\n        login(formData.email, formData.password);\n    };\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            {error && <MyAlert />}\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Log in\n                </Typography>\n                <form onSubmit={onSubmit} className={classes.form} noValidate>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"email\"\n                        label=\"Email Address\"\n                        name=\"email\"\n                        value={formData.email}\n                        autoComplete=\"email\"\n                        onChange={onChange}\n                        autoFocus\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        value={formData.password}\n                        onChange={onChange}\n                        autoComplete=\"current-password\"\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Log In\n                    </Button>\n                    <Grid container>\n                        <Grid item>\n                            <Link to=\"/register\" variant=\"body2\">\n                                {\"Don't have an account? Register Now\"}\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </form>\n            </div>\n            {/* {loggedIn && <Redirect to=\"/dashboard\"></Redirect>} */}\n        </Container>\n    );\n};\n\nexport default Login;\n","/home/shrey2809/MERN/frontend/src/components/Register.js",[],"/home/shrey2809/MERN/frontend/src/components/Navbar.js",["102","103"],"import React from 'react';\nimport { Link, Redirect, Switch } from 'react-router-dom';\nimport { signout } from './LoginSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport PersonIcon from '@material-ui/icons/Person';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport LockIcon from '@material-ui/icons/Lock';\nimport WorkIcon from '@material-ui/icons/Work';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport GroupIcon from '@material-ui/icons/Group';\nimport DescriptionIcon from '@material-ui/icons/Description';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex'\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        })\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen\n        })\n    },\n    menuButton: {\n        marginRight: 36\n    },\n    hide: {\n        display: 'none'\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        whiteSpace: 'nowrap'\n    },\n    drawerOpen: {\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen\n        })\n    },\n    drawerClose: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        }),\n        overflowX: 'hidden',\n        width: theme.spacing(7) + 1,\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9) + 1\n        }\n    },\n    toolbar: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: theme.spacing(0, 1),\n        ...theme.mixins.toolbar\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3)\n    }\n}));\n\nconst Navbar = ({ children }) => {\n    const loggedIn = useSelector(state => state.login.isAuthenticated);\n    const role = useSelector(state => state.login.role);\n\n    const dispatch = useDispatch();\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(false);\n\n    const onClick = e => {\n        e.preventDefault();\n        dispatch(signout());\n    };\n    // if (!loggedIn) return <Redirect to=\"/login\" />;\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    let links = [];\n\n    if (!loggedIn) {\n        links = [\n            { title: 'Login', to: '/login', icon: <LockOpenIcon /> },\n            { title: 'Register', to: '/register', icon: <PersonAddIcon /> }\n        ];\n    } else {\n        if (role === 'Applicant') {\n            links = [\n                { title: 'Jobs', to: '/dashboard', icon: <DashboardIcon /> },\n                {\n                    title: 'My Applications',\n                    to: '/myapplication',\n                    icon: <DescriptionIcon />\n                },\n                { title: 'Profile', to: '/profile', icon: <PersonIcon /> }\n            ];\n        } else if (role === 'Recruiter') {\n            links = [\n                { title: 'My Jobs', to: '/myjobs', icon: <WorkIcon /> },\n                { title: 'My Employees', to: '/myemp', icon: <GroupIcon /> },\n                { title: 'Profile', to: '/profile', icon: <PersonIcon /> }\n            ];\n        }\n    }\n\n    let logoutRender;\n    if (loggedIn) {\n        logoutRender = (\n            <ListItem button onClick={onClick} key=\"Logout\" component={Link} to=\"/login\">\n                <ListItemIcon>\n                    <LockIcon />{' '}\n                </ListItemIcon>\n                <ListItemText primary=\"Logout\" />\n            </ListItem>\n        );\n    }\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open\n                })}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(classes.menuButton, {\n                            [classes.hide]: open\n                        })}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        Jobz\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                className={clsx(classes.drawer, {\n                    [classes.drawerOpen]: open,\n                    [classes.drawerClose]: !open\n                })}\n                classes={{\n                    paper: clsx({\n                        [classes.drawerOpen]: open,\n                        [classes.drawerClose]: !open\n                    })\n                }}\n            >\n                <div className={classes.toolbar}>\n                    <IconButton onClick={handleDrawerClose}>\n                        {theme.direction === 'rtl' ? (\n                            <ChevronRightIcon />\n                        ) : (\n                            <ChevronLeftIcon />\n                        )}\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>\n                    {links.map(link => (\n                        <ListItem button key={link.title} component={Link} to={link.to}>\n                            <ListItemIcon>{link.icon}</ListItemIcon>\n                            <ListItemText primary={link.title} />\n                        </ListItem>\n                    ))}\n                    {logoutRender}\n                </List>\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.toolbar} />\n                {children}\n            </main>\n        </div>\n    );\n};\n\nexport default Navbar;\n","/home/shrey2809/MERN/frontend/src/components/LoginSlice.js",[],"/home/shrey2809/MERN/frontend/src/utils/apiCalls.js",["104"],"import axios from 'axios';\n\nexport default {\n    get(url, payload) {\n        if (payload)\n            return axios.get(url, {\n                params: {\n                    source_content_type: 'application/json',\n                    source: JSON.stringify(payload.query)\n                }\n            });\n        return axios.get(url);\n    },\n    post(url, payload = {}) {\n        return axios.post(url, payload.body);\n    },\n    put(url, payload = {}) {\n        return axios.put(url, payload.body);\n    },\n    patch(url, payload = {}) {\n        return axios.patch(url, payload.body);\n    },\n    delete(url) {\n        return axios.delete(url);\n    }\n};\n",["105","106"],"/home/shrey2809/MERN/frontend/src/components/MyAlert.js",[],"/home/shrey2809/MERN/frontend/src/components/Dashboard.js",["107","108","109","110","111","112"],"/home/shrey2809/MERN/frontend/src/components/Profile.js",["113","114","115","116","117","118"],"import { React, useState, useEffect } from 'react';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { signin, signout, signerror, signnoerror } from './LoginSlice';\nimport api from '../utils/apiCalls';\nimport axios from 'axios';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport PersonIcon from '@material-ui/icons/Person';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport MyAlert from './MyAlert';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '100%'\n        }\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: '100%'\n    },\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    }\n}));\n\nconst Profile = () => {\n    const dispatch = useDispatch();\n\n    const loggedIn = useSelector(state => state.login.isAuthenticated);\n\n    const role = useSelector(state => state.login.role);\n    const error = useSelector(state => state.login.error);\n\n    const [loading, setLoading] = useState(false);\n    const [upd, setUpd] = useState(false);\n\n    const update = async formData => {\n        try {\n            const response = await api.patch('/api/users/update', {\n                body: formData\n            });\n            const result = response.data;\n            dispatch(signnoerror());\n            setUpd(!upd);\n        } catch (err) {\n            setUpd(!upd);\n            const message = err.response.data.errors[0].msg;\n            // dispatch(signout());\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    const classes = useStyles();\n\n    const [formData, setFormData] = useState({\n        role: '',\n        email: '',\n        password: '',\n        name: '',\n        bio: '',\n        education: [],\n        skill: [],\n        contact: ''\n    });\n\n    const [edu, setEdu] = useState([{ institute: '', startYear: '', endYear: '' }]);\n    const [skill, setSkill] = useState(['']);\n\n    const getMe = async () => {\n        setLoading(true);\n        const res = await axios.get(`/api/users/`);\n        // console.log(res);\n        const result = res.data.data.data;\n        // console.log(result);\n        setFormData(result);\n        setEdu(result.education);\n        setSkill(result.skill);\n        setLoading(false);\n    };\n    const history = useHistory();\n\n    useEffect(() => {\n        if (!loggedIn) history.push('/login');\n        else getMe();\n    }, [loggedIn, upd]);\n\n    // if (!loggedIn) return <Redirect to=\"/login\" />;\n\n    const onChange = e => {\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const addEduField = () => {\n        setEdu([...edu, { institute: '', startYear: '', endYear: '' }]);\n    };\n\n    const removeEduField = index => {\n        const education = [...edu];\n        education.splice(index, 1);\n        setEdu(education);\n        setFormData({\n            ...formData,\n            education: education\n        });\n    };\n\n    const addSkillField = () => {\n        setSkill([...skill, '']);\n    };\n\n    const removeSkillField = index => {\n        let skills = [...skill];\n        skills.splice(index, 1);\n        setSkill(skills);\n        setFormData({\n            ...formData,\n            skill: skills\n        });\n    };\n\n    const skillChange = (index, event) => {\n        const skills = [...skill];\n        skills[index] = event.target.value;\n        setSkill(skills);\n        setFormData({\n            ...formData,\n            skill: skills\n        });\n    };\n\n    const checkChange = event => {\n        const skills = [...skill];\n        if (event.target.checked) {\n            skills.push(event.target.name);\n        } else {\n            const index = skill.indexOf(event.target.name);\n            skills.splice(index, 1);\n        }\n        setSkill(skills);\n        setFormData({\n            ...formData,\n            skill: skills\n        });\n    };\n\n    const educationChange = (index, event) => {\n        const education = [...edu];\n        education[index][event.target.name] = event.target.value;\n        setEdu(education);\n        setFormData({\n            ...formData,\n            education: education\n        });\n    };\n\n    const checkSkill = ['C', 'Python', 'Java'];\n\n    const onSubmit = e => {\n        e.preventDefault();\n        // console.log(formData);\n        update(formData);\n    };\n    if (loading) {\n        return <h1>loading</h1>;\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            {error && <MyAlert />}\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <PersonIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Profile\n                </Typography>\n                <form onSubmit={onSubmit} className={classes.form} noValidate>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"name\"\n                        label=\"Name\"\n                        name=\"name\"\n                        value={formData.name}\n                        autoComplete=\"name\"\n                        onChange={onChange}\n                        autoFocus\n                    />\n                    <TextField\n                        disabled\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"email\"\n                        label=\"Email Address\"\n                        name=\"email\"\n                        value={formData.email}\n                        autoComplete=\"email\"\n                        onChange={onChange}\n                        autoFocus\n                    />\n                    <TextField\n                        disabled\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        value={formData.password}\n                        onChange={onChange}\n                        autoComplete=\"current-password\"\n                    />\n                    {role === 'Applicant' && (\n                        <Typography component=\"h1\" variant=\"h6\">\n                            Education\n                        </Typography>\n                    )}\n                    {role === 'Applicant' &&\n                        edu.map((e, index) => (\n                            <div key={index}>\n                                <TextField\n                                    name=\"institute\"\n                                    label=\"Institute\"\n                                    value={e.institute}\n                                    onChange={event => educationChange(index, event)}\n                                />\n                                <TextField\n                                    name=\"startYear\"\n                                    label=\"Start Year\"\n                                    value={e.startYear}\n                                    onChange={event => educationChange(index, event)}\n                                />\n                                <TextField\n                                    name=\"endYear\"\n                                    label=\"End Year\"\n                                    value={e.endYear}\n                                    onChange={event => educationChange(index, event)}\n                                />\n                                <IconButton\n                                    disabled={edu.length === 1}\n                                    onClick={() => removeEduField(index)}\n                                >\n                                    <RemoveIcon />\n                                </IconButton>\n                            </div>\n                        ))}\n                    {role === 'Applicant' && (\n                        <IconButton onClick={addEduField}>\n                            <AddIcon />\n                        </IconButton>\n                    )}\n                    {role === 'Applicant' && (\n                        <Typography component=\"h1\" variant=\"h6\">\n                            Skills\n                        </Typography>\n                    )}\n                    {role === 'Applicant' &&\n                        checkSkill.map(e => (\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={skill.includes(e)}\n                                        onChange={event => checkChange(event)}\n                                        name={e}\n                                    />\n                                }\n                                label={e}\n                            />\n                        ))}\n                    {role === 'Applicant' &&\n                        skill.map((e, index) => (\n                            <div key={index}>\n                                <TextField\n                                    name=\"skill\"\n                                    label=\"Skill\"\n                                    value={e}\n                                    onChange={event => skillChange(index, event)}\n                                />\n                                <IconButton\n                                    disabled={skill.length === 1}\n                                    onClick={() => removeSkillField(index)}\n                                >\n                                    <RemoveIcon />\n                                </IconButton>\n                            </div>\n                        ))}\n                    {role === 'Applicant' && (\n                        <IconButton onClick={addSkillField}>\n                            <AddIcon />\n                        </IconButton>\n                    )}\n                    {role === 'Recruiter' && (\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            fullWidth\n                            id=\"bio\"\n                            label=\"Bio\"\n                            name=\"bio\"\n                            value={formData.bio}\n                            autoComplete=\"bio\"\n                            onChange={onChange}\n                            autoFocus\n                        />\n                    )}\n                    {role === 'Recruiter' && (\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            fullWidth\n                            name=\"contact\"\n                            label=\"Contact\"\n                            type=\"number\"\n                            id=\"contact\"\n                            value={formData.contact}\n                            onChange={onChange}\n                        />\n                    )}\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Update\n                    </Button>\n                </form>\n            </div>\n        </Container>\n    );\n};\n\nexport default Profile;\n","/home/shrey2809/MERN/frontend/src/components/MyApplication.js",["119","120","121","122","123"],"import { React, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { signerror, signnoerror } from './LoginSlice';\nimport api from '../utils/apiCalls';\nimport MyAlert from './MyAlert';\n\nimport Button from '@material-ui/core/Button';\nimport { DataGrid } from '@material-ui/data-grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nconst MyApplication = () => {\n    const dispatch = useDispatch();\n    const loggedIn = useSelector(state => state.login.isAuthenticated);\n    const error = useSelector(state => state.login.error);\n    const [app, setApp] = useState(undefined);\n\n    const [rate, setRate] = useState('');\n    const [open, setOpen] = useState(false);\n    const [id, setId] = useState('');\n    const [hasrate, setHasRate] = useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n        setRate('');\n        setId('');\n    };\n\n    function getRecruiterName(params) {\n        return params.getValue('job').recruiter.name;\n    }\n\n    function getSalary(params) {\n        return params.getValue('job').salary;\n    }\n\n    function getTitle(params) {\n        return params.getValue('job').title;\n    }\n\n    function getRating(params) {\n        return params.getValue('job').avgRating;\n    }\n\n    function getDate(params) {\n        const status = params.getValue('status');\n        if (status !== 'Accepted') return 'NA';\n        var localDate = new Date(params.getValue('date'));\n        return localDate.toDateString();\n    }\n\n    const rateJob = async () => {\n        setOpen(false);\n        // console.log(id, rate);\n        try {\n            const response = await api.post(`/api/ratings/job/${id}`, {\n                body: { value: rate }\n            });\n            // const result = response.data.data.data;\n            // const jobID = result.job;\n            // let appz = [...app];\n            // appz.forEach(el => {\n            //     if (el.id === jobID) {\n            //         el.applied = 'Applied';\n            //     }\n            // });\n            // setApp(appz);\n            setHasRate(!hasrate);\n            dispatch(signnoerror());\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    function renderRate(id) {\n        setOpen(true);\n        setRate('3');\n        var appEle = app.filter(el => {\n            return el.id === id;\n        });\n        setId(appEle[0].job._id);\n    }\n\n    function rateButton(params) {\n        const status = params.getValue('status');\n        const hasRated = params.getValue('hasRated');\n        if (status === 'Accepted') {\n            return (\n                <strong>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"small\"\n                        disabled={hasRated ? true : false}\n                        onClick={() => renderRate(params.getValue('id'))}\n                        style={{ marginLeft: 16 }}\n                    >\n                        Rate\n                    </Button>\n                </strong>\n            );\n        }\n        return (\n            <strong>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    disabled\n                    style={{ marginLeft: 16 }}\n                >\n                    NA\n                </Button>\n            </strong>\n        );\n    }\n\n    const columns = [\n        {\n            field: 'title',\n            headerName: 'Title',\n            width: 250,\n            valueGetter: getTitle,\n            sortable: false\n        },\n        {\n            field: 'date',\n            headerName: 'Date of Joining',\n            width: 150,\n            valueFormatter: getDate,\n            sortable: false\n        },\n        {\n            field: 'salary',\n            headerName: 'Salary',\n            width: 150,\n            valueGetter: getSalary,\n            sortable: false\n        },\n        {\n            field: 'recuiter',\n            headerName: 'Recruiter',\n            width: 250,\n            valueGetter: getRecruiterName,\n            sortable: false\n        },\n        {\n            field: 'status',\n            headerName: 'Status',\n            width: 150,\n            sortable: false\n        },\n        {\n            field: 'avgRating',\n            headerName: 'Rating',\n            valueGetter: getRating,\n            width: 150,\n            sortable: false\n        },\n        {\n            field: 'rate',\n            headerName: 'Rate',\n            renderCell: rateButton,\n            width: 150,\n            sortable: false\n        }\n    ];\n\n    const getMyApps = async () => {\n        try {\n            const res = await axios.get('api/applicant/myApp');\n            let result = res.data.data.data;\n            result.forEach(a => {\n                a.id = a._id;\n            });\n            setApp(result);\n            dispatch(signnoerror());\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    const rateChange = e => {\n        setRate(e.target.value);\n        // console.log(e.target.value);\n    };\n\n    const history = useHistory();\n\n    useEffect(() => {\n        if (!loggedIn) history.push('/login');\n        else getMyApps();\n    }, [loggedIn, hasrate]);\n\n    if (!app) {\n        return <h1>loading</h1>;\n    }\n\n    return (\n        <>\n            {error && <MyAlert />}\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n                fullWidth\n            >\n                <DialogTitle id=\"form-dialog-title\">RATE</DialogTitle>\n                <DialogContent>\n                    <FormControl component=\"fieldset\">\n                        {/* <FormLabel component=\"legend\">Rating</FormLabel> */}\n                        <RadioGroup\n                            aria-label=\"rate\"\n                            name=\"rate\"\n                            value={rate}\n                            onChange={rateChange}\n                        >\n                            <FormControlLabel value=\"1\" control={<Radio />} label=\"1\" />\n                            <FormControlLabel value=\"2\" control={<Radio />} label=\"2\" />\n                            <FormControlLabel value=\"3\" control={<Radio />} label=\"3\" />\n                            <FormControlLabel value=\"4\" control={<Radio />} label=\"4\" />\n                            <FormControlLabel value=\"5\" control={<Radio />} label=\"5\" />\n                        </RadioGroup>\n                    </FormControl>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={rateJob} color=\"primary\">\n                        Rate\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <div style={{ height: 400, width: '100%' }}>\n                <DataGrid\n                    rows={app ? app : []}\n                    columns={columns.map(column => ({\n                        ...column,\n                        disableClickEventBubbling: true\n                    }))}\n                    disableColumnMenu=\"true\"\n                />\n            </div>\n        </>\n    );\n};\n\nexport default MyApplication;\n","/home/shrey2809/MERN/frontend/src/components/MyJobs.js",["124","125","126","127","128","129","130","131"],"import { React, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { signerror, signnoerror } from './LoginSlice';\nimport api from '../utils/apiCalls';\nimport MyAlert from './MyAlert';\nimport Application from './Application';\n\nimport Button from '@material-ui/core/Button';\nimport { DataGrid } from '@material-ui/data-grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Typography from '@material-ui/core/Typography';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst MyJobs = props => {\n    const dispatch = useDispatch();\n    const loggedIn = useSelector(state => state.login.isAuthenticated);\n    const error = useSelector(state => state.login.error);\n    const [jobs, setJobs] = useState(undefined);\n    const [change, setChange] = useState(false);\n\n    const [openEdit, setOpenEdit] = useState(false);\n    const [openAdd, setOpenAdd] = useState(false);\n    const [editForm, setEditForm] = useState({\n        maxPos: '',\n        maxApp: '',\n        deadline: ''\n    });\n    const [addForm, setAddForm] = useState({\n        title: '',\n        salary: 0,\n        deadline: '',\n        skill: [],\n        type: '',\n        duration: 0,\n        maxPos: 0,\n        maxApp: 0\n    });\n    const [skill, setSkill] = useState(['']);\n    const [id, setId] = useState('');\n\n    const handleClose = () => {\n        setOpenEdit(false);\n        setEditForm({\n            maxPos: '',\n            maxApp: '',\n            deadline: ''\n        });\n        setId('');\n    };\n\n    const handleAddClose = () => {\n        setOpenAdd(false);\n        setAddForm({\n            title: '',\n            salary: 0,\n            deadline: '',\n            skill: [],\n            type: '',\n            duration: 0,\n            maxPos: 0,\n            maxApp: 0\n        });\n        setSkill(['']);\n        dispatch(signnoerror());\n    };\n\n    function getDate(params) {\n        var localDate = new Date(params.getValue('datePost'));\n        return localDate.toDateString();\n    }\n\n    const editJob = async () => {\n        setOpenEdit(false);\n        try {\n            const response = await api.patch(`/api/jobs/${id}`, {\n                body: editForm\n            });\n            setChange(!change);\n            dispatch(signnoerror());\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    const addJob = async () => {\n        // console.log(addForm);\n        try {\n            const response = await api.post(`/api/jobs/`, {\n                body: addForm\n            });\n            setChange(!change);\n            dispatch(signnoerror());\n            setOpenAdd(false);\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    const deleteJob = async id => {\n        try {\n            const response = await api.delete(`/api/jobs/${id}`);\n            setChange(!change);\n            dispatch(signnoerror());\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    function renderEdit(id) {\n        setOpenEdit(true);\n        setOpenAdd(false);\n        setEditForm({\n            maxPos: '',\n            maxApp: '',\n            deadline: ''\n        });\n        setId(id);\n    }\n\n    function addJobRender() {\n        setOpenAdd(true);\n        setOpenEdit(false);\n        setAddForm({\n            title: '',\n            salary: 0,\n            deadline: '',\n            skill: [],\n            type: '',\n            duration: 0,\n            maxPos: 0,\n            maxApp: 0\n        });\n        setSkill(['']);\n    }\n\n    function editButton(params) {\n        return (\n            <strong>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    onClick={() => renderEdit(params.getValue('id'))}\n                    style={{ marginLeft: 16 }}\n                >\n                    Edit\n                </Button>\n            </strong>\n        );\n    }\n\n    function deleteButton(params) {\n        return (\n            <strong>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    size=\"small\"\n                    onClick={() => deleteJob(params.getValue('id'))}\n                    style={{ marginLeft: 16 }}\n                >\n                    Delete\n                </Button>\n            </strong>\n        );\n    }\n\n    function viewButton(params) {\n        return (\n            <strong>\n                <Button\n                    variant=\"contained\"\n                    color=\"default\"\n                    size=\"small\"\n                    onClick={() =>\n                        props.history.push({\n                            pathname: '/app',\n                            state: { jobId: params.getValue('id') }\n                        })\n                    }\n                    style={{ marginLeft: 16 }}\n                >\n                    View\n                </Button>\n            </strong>\n        );\n    }\n\n    const columns = [\n        {\n            field: 'title',\n            headerName: 'Title',\n            width: 250,\n            sortable: false\n        },\n        {\n            field: 'datePost',\n            headerName: 'Date Posted',\n            width: 180,\n            valueFormatter: getDate,\n            sortable: false\n        },\n        {\n            field: 'maxPos',\n            headerName: 'Max Positions',\n            width: 150,\n            sortable: false\n        },\n        {\n            field: 'posLeft',\n            headerName: 'Positions Left',\n            width: 150,\n            sortable: false\n        },\n        {\n            field: 'numApplicants',\n            headerName: 'Number Applied',\n            width: 150,\n            sortable: false\n        },\n        {\n            field: 'edit',\n            headerName: 'Edit',\n            renderCell: editButton,\n            width: 150,\n            sortable: false\n        },\n        {\n            field: 'delete',\n            headerName: 'Delete',\n            renderCell: deleteButton,\n            width: 150,\n            sortable: false\n        },\n        {\n            field: 'view',\n            headerName: 'View Applications',\n            renderCell: viewButton,\n            width: 150,\n            sortable: false\n        }\n    ];\n\n    const getMyJobs = async () => {\n        try {\n            const res = await axios.get('api/recruiter/');\n            let result = res.data.data.data;\n            result.forEach(a => {\n                a.id = a._id;\n            });\n            setJobs(result);\n            dispatch(signnoerror());\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    const editFormChange = e => {\n        setEditForm({\n            ...editForm,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const addFormChange = e => {\n        setAddForm({\n            ...addForm,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const addSkillField = () => {\n        setSkill([...skill, '']);\n    };\n\n    const removeSkillField = index => {\n        let skills = [...skill];\n        skills.splice(index, 1);\n        setSkill(skills);\n        setAddForm({\n            ...addForm,\n            skill: skills\n        });\n    };\n\n    const skillChange = (index, event) => {\n        const skills = [...skill];\n        skills[index] = event.target.value;\n        setSkill(skills);\n        setAddForm({\n            ...addForm,\n            skill: skills\n        });\n    };\n\n    const checkChange = event => {\n        const skills = [...skill];\n        if (event.target.checked) {\n            skills.push(event.target.name);\n        } else {\n            const index = skill.indexOf(event.target.name);\n            skills.splice(index, 1);\n        }\n        setSkill(skills);\n        setAddForm({\n            ...addForm,\n            skill: skills\n        });\n    };\n\n    const history = useHistory();\n\n    const checkSkill = ['C', 'Python', 'Java'];\n\n    useEffect(() => {\n        if (!loggedIn) history.push('/login');\n        else getMyJobs();\n    }, [loggedIn, change]);\n\n    if (!jobs) {\n        return <h1>loading</h1>;\n    }\n\n    return (\n        <>\n            {error && <MyAlert />}\n            <Dialog\n                open={openAdd}\n                onClose={handleAddClose}\n                aria-labelledby=\"form-dialog-title\"\n                fullWidth\n            >\n                <DialogTitle id=\"form-dialog-title\">ADD JOB</DialogTitle>\n                {error && <MyAlert />}\n                <DialogContent>\n                    <Grid container spacing={3}>\n                        <Grid item xs={4}>\n                            <TextField\n                                id=\"standard-basic\"\n                                label=\"Title\"\n                                name=\"title\"\n                                value={addForm.title}\n                                onChange={addFormChange}\n                            />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <TextField\n                                id=\"standard-basic\"\n                                label=\"Salary\"\n                                name=\"salary\"\n                                value={addForm.salary}\n                                onChange={addFormChange}\n                            />\n                        </Grid>\n                        <Grid item xs={5}>\n                            {/* <TextField\n                                id=\"standard-basic\"\n                                label=\"Deadline YYYY-MM-DD\"\n                                name=\"deadline\"\n                                value={addForm.deadline}\n                                onChange={addFormChange}\n                            /> */}\n                            <TextField\n                                id=\"datetime-local\"\n                                label=\"Deadline\"\n                                type=\"datetime-local\"\n                                name=\"deadline\"\n                                value={addForm.deadline}\n                                onChange={addFormChange}\n                                InputLabelProps={{\n                                    shrink: true\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid container spacing={3}>\n                        <Grid item xs={3}>\n                            <TextField\n                                id=\"standard-basic\"\n                                label=\"Max Positions\"\n                                name=\"maxPos\"\n                                value={addForm.maxPos}\n                                onChange={addFormChange}\n                            />\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextField\n                                id=\"standard-basic\"\n                                label=\"Max Applications\"\n                                name=\"maxApp\"\n                                value={addForm.maxApp}\n                                onChange={addFormChange}\n                            />\n                        </Grid>\n                        <Grid item xs={2}>\n                            <InputLabel id=\"duration\">Duration</InputLabel>\n                            <Select\n                                labelId=\"Duration\"\n                                id=\"duration\"\n                                value={addForm.duration}\n                                onChange={addFormChange}\n                                name=\"duration\"\n                                style={{ width: '100%' }}\n                            >\n                                <MenuItem value={'0'}>0</MenuItem>\n                                <MenuItem value={'1'}>1</MenuItem>\n                                <MenuItem value={'2'}>2</MenuItem>\n                                <MenuItem value={'3'}>3</MenuItem>\n                                <MenuItem value={'4'}>4</MenuItem>\n                                <MenuItem value={'5'}>5</MenuItem>\n                                <MenuItem value={'6'}>6</MenuItem>\n                            </Select>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <InputLabel id=\"jobType\">Job Type</InputLabel>\n                            <Select\n                                labelId=\"Type\"\n                                id=\"type\"\n                                value={addForm.type}\n                                onChange={addFormChange}\n                                name=\"type\"\n                                style={{ width: '100%' }}\n                            >\n                                <MenuItem value={'Full-Time'}>Full Time</MenuItem>\n                                <MenuItem value={'Part-Time'}>Part Time</MenuItem>\n                                <MenuItem value={'Work-From-Home'}>\n                                    Work From Home\n                                </MenuItem>\n                            </Select>\n                        </Grid>\n                    </Grid>\n                    <div style={{ marginTop: '20px' }}>\n                        <InputLabel id=\"skills\">Skills</InputLabel>\n                    </div>\n                    {checkSkill.map(e => (\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={skill.includes(e)}\n                                    onChange={event => checkChange(event)}\n                                    name={e}\n                                />\n                            }\n                            label={e}\n                        />\n                    ))}\n                    {skill.map((e, index) => (\n                        <div key={index}>\n                            <TextField\n                                name=\"skill\"\n                                label=\"Skill\"\n                                value={e}\n                                onChange={event => skillChange(index, event)}\n                            />\n                            <IconButton\n                                disabled={skill.length === 1}\n                                onClick={() => removeSkillField(index)}\n                            >\n                                <RemoveIcon />\n                            </IconButton>\n                        </div>\n                    ))}\n                    <IconButton onClick={addSkillField}>\n                        <AddIcon />\n                    </IconButton>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAddClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={addJob} color=\"primary\">\n                        Add\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <Dialog\n                open={openEdit}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n                fullWidth\n            >\n                <DialogTitle id=\"form-dialog-title\">EDIT</DialogTitle>\n                <DialogContent>\n                    <Grid container spacing={3}>\n                        <Grid item xs={3}>\n                            <TextField\n                                id=\"standard-basic\"\n                                label=\"Max Applicants\"\n                                name=\"maxApp\"\n                                value={editForm.maxApp}\n                                onChange={editFormChange}\n                            />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <TextField\n                                id=\"standard-basic\"\n                                label=\"Max Positions\"\n                                name=\"maxPos\"\n                                value={editForm.maxPos}\n                                onChange={editFormChange}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            {/* <TextField\n                                id=\"standard-basic\"\n                                label=\"Deadline YYYY-MM-DD\"\n                                name=\"deadline\"\n                                value={editForm.deadline}\n                                onChange={editFormChange}\n                            /> */}\n                            <TextField\n                                id=\"datetime-local\"\n                                label=\"Deadline\"\n                                type=\"datetime-local\"\n                                name=\"deadline\"\n                                value={editForm.deadline}\n                                onChange={editFormChange}\n                                InputLabelProps={{\n                                    shrink: true\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={editJob} color=\"primary\">\n                        Edit\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <div style={{ height: 400, width: '100%' }}>\n                <DataGrid\n                    rows={jobs ? jobs : []}\n                    columns={columns.map(column => ({\n                        ...column,\n                        disableClickEventBubbling: true\n                    }))}\n                    disableColumnMenu=\"true\"\n                />\n            </div>\n            <Button\n                style={{ marginTop: '30px', width: '100%', height: '50px' }}\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => addJobRender()}\n            >\n                Add Job\n            </Button>\n        </>\n    );\n};\n\nexport default MyJobs;\n","/home/shrey2809/MERN/frontend/src/components/Employees.js",["132","133","134","135","136"],"import { React, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { signerror, signnoerror } from './LoginSlice';\nimport api from '../utils/apiCalls';\nimport MyAlert from './MyAlert';\n\nimport Button from '@material-ui/core/Button';\nimport { DataGrid } from '@material-ui/data-grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nconst Employees = () => {\n    const dispatch = useDispatch();\n    const loggedIn = useSelector(state => state.login.isAuthenticated);\n    const error = useSelector(state => state.login.error);\n    const [emp, setEmp] = useState(undefined);\n\n    const [rate, setRate] = useState('');\n    const [open, setOpen] = useState(false);\n    const [id, setId] = useState('');\n    const [hasrate, setHasRate] = useState(false);\n    const [sorts, setSort] = useState({\n        sortName: '',\n        sortRating: '',\n        sortTitle: '',\n        sortDate: ''\n    });\n\n    const handleClose = () => {\n        setOpen(false);\n        setRate('');\n        setId('');\n    };\n\n    function getName(params) {\n        return params.getValue('applicant').name;\n    }\n\n    function getTitle(params) {\n        return params.getValue('job').title;\n    }\n\n    function getType(params) {\n        return params.getValue('job').type;\n    }\n\n    function getRating(params) {\n        return params.getValue('applicant').avgRating;\n    }\n\n    function getDate(params) {\n        var localDate = new Date(params.getValue('date'));\n        return localDate.toDateString();\n    }\n\n    const rateEmp = async () => {\n        setOpen(false);\n        try {\n            const response = await api.post(`/api/ratings/applicant/${id}`, {\n                body: { value: rate }\n            });\n            setHasRate(!hasrate);\n            setSort({\n                sortName: '',\n                sortRating: '',\n                sortTitle: '',\n                sortDate: ''\n            });\n            dispatch(signnoerror());\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    function renderRate(id) {\n        setOpen(true);\n        setRate('3');\n        var appEle = emp.filter(el => {\n            return el.id === id;\n        });\n        setId(appEle[0].applicant._id);\n    }\n\n    function rateButton(params) {\n        const hasRated = params.getValue('hasRated');\n        return (\n            <strong>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    disabled={hasRated ? true : false}\n                    onClick={() => renderRate(params.getValue('id'))}\n                    style={{ marginLeft: 16 }}\n                >\n                    Rate\n                </Button>\n            </strong>\n        );\n    }\n\n    const columns = [\n        {\n            field: 'name',\n            headerName: 'Name',\n            width: 250,\n            valueGetter: getName,\n            sortable: false\n        },\n        {\n            field: 'date',\n            headerName: 'Date of Joining',\n            width: 180,\n            valueFormatter: getDate,\n            sortable: false\n        },\n        {\n            field: 'title',\n            headerName: 'Title',\n            width: 250,\n            valueGetter: getTitle,\n            sortable: false\n        },\n        {\n            field: 'type',\n            headerName: 'Job Type',\n            valueGetter: getType,\n            width: 150,\n            sortable: false\n        },\n        {\n            field: 'avgRating',\n            headerName: 'Rating',\n            valueGetter: getRating,\n            width: 150,\n            sortable: false\n        },\n        {\n            field: 'rate',\n            headerName: 'Rate',\n            renderCell: rateButton,\n            width: 150,\n            sortable: false\n        }\n    ];\n\n    const getMyEmp = async () => {\n        try {\n            const res = await axios.get('api/recruiter/emp');\n            let result = res.data.data.data;\n            result.forEach(a => {\n                a.id = a._id;\n            });\n            setEmp(result);\n            dispatch(signnoerror());\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    const sortEmp = e => {\n        let empss = [...emp];\n        empss.sort((emp1, emp2) => {\n            if (sorts.sortName) {\n                if (emp1.applicant.name < emp2.applicant.name)\n                    return sorts.sortName === 'Asc' ? -1 : 1;\n                if (emp1.applicant.name > emp2.applicant.name)\n                    return sorts.sortName === 'Asc' ? 1 : -1;\n            }\n\n            if (sorts.sortTitle) {\n                if (emp1.job.title < emp2.job.title)\n                    return sorts.sortTitle === 'Asc' ? -1 : 1;\n                if (emp1.job.title > emp2.job.title)\n                    return sorts.sortTitle === 'Asc' ? 1 : -1;\n            }\n\n            if (sorts.sortRating) {\n                if (emp1.applicant.avgRating < emp2.applicant.avgRating)\n                    return sorts.sortRating === 'Asc' ? -1 : 1;\n                if (emp1.applicant.avgRating > emp2.applicant.avgRating)\n                    return sorts.sortRating === 'Asc' ? 1 : -1;\n            }\n\n            if (sorts.sortDate) {\n                if (emp1.date < emp2.date) return sorts.sortDate === 'Asc' ? -1 : 1;\n                if (emp1.date > emp2.date) return sorts.sortDate === 'Asc' ? 1 : -1;\n            }\n        });\n        setEmp(empss);\n    };\n\n    const rateChange = e => {\n        setRate(e.target.value);\n    };\n\n    const sortsChange = e => {\n        setSort({\n            ...sorts,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const history = useHistory();\n\n    useEffect(() => {\n        if (!loggedIn) history.push('/login');\n        else getMyEmp();\n    }, [loggedIn, hasrate]);\n\n    if (!emp) {\n        return <h1>loading</h1>;\n    }\n\n    return (\n        <>\n            {error && <MyAlert />}\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n                fullWidth\n            >\n                <DialogTitle id=\"form-dialog-title\">RATE</DialogTitle>\n                <DialogContent>\n                    <FormControl component=\"fieldset\">\n                        <RadioGroup\n                            aria-label=\"rate\"\n                            name=\"rate\"\n                            value={rate}\n                            onChange={rateChange}\n                        >\n                            <FormControlLabel value=\"1\" control={<Radio />} label=\"1\" />\n                            <FormControlLabel value=\"2\" control={<Radio />} label=\"2\" />\n                            <FormControlLabel value=\"3\" control={<Radio />} label=\"3\" />\n                            <FormControlLabel value=\"4\" control={<Radio />} label=\"4\" />\n                            <FormControlLabel value=\"5\" control={<Radio />} label=\"5\" />\n                        </RadioGroup>\n                    </FormControl>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={rateEmp} color=\"primary\">\n                        Rate\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <Grid container spacing={5} style={{ marginTop: '20px' }}>\n                <Grid item xs={2}>\n                    <InputLabel id=\"sortName\">Sort Name:</InputLabel>\n                    <Select\n                        labelId=\"sortName\"\n                        id=\"sortName\"\n                        value={sorts.sortName}\n                        onChange={sortsChange}\n                        name=\"sortName\"\n                        style={{ width: '100%' }}\n                    >\n                        <MenuItem value={''}>Unsort</MenuItem>\n                        <MenuItem value={'Asc'}>Ascending</MenuItem>\n                        <MenuItem value={'Des'}>Descending</MenuItem>\n                    </Select>\n                </Grid>\n                <Grid item xs={2}>\n                    <InputLabel id=\"sortTitle\">Sort Title:</InputLabel>\n                    <Select\n                        labelId=\"sortTitle\"\n                        id=\"sortTitle\"\n                        value={sorts.sortTitle}\n                        onChange={sortsChange}\n                        name=\"sortTitle\"\n                        style={{ width: '100%' }}\n                    >\n                        <MenuItem value={''}>Unsort</MenuItem>\n                        <MenuItem value={'Asc'}>Ascending</MenuItem>\n                        <MenuItem value={'Des'}>Descending</MenuItem>\n                    </Select>\n                </Grid>\n                <Grid item xs={2}>\n                    <InputLabel id=\"sortRating\">Sort Rating:</InputLabel>\n                    <Select\n                        labelId=\"sortRating\"\n                        id=\"sortRating\"\n                        value={sorts.sortRating}\n                        onChange={sortsChange}\n                        name=\"sortRating\"\n                        style={{ width: '100%' }}\n                    >\n                        <MenuItem value={''}>Unsort</MenuItem>\n                        <MenuItem value={'Asc'}>Ascending</MenuItem>\n                        <MenuItem value={'Des'}>Descending</MenuItem>\n                    </Select>\n                </Grid>\n                <Grid item xs={3}>\n                    <InputLabel id=\"sortDate\">Sort Date of Joining:</InputLabel>\n                    <Select\n                        labelId=\"sortDate\"\n                        id=\"sortDate\"\n                        value={sorts.sortDate}\n                        onChange={sortsChange}\n                        name=\"sortDate\"\n                        style={{ width: '100%' }}\n                    >\n                        <MenuItem value={''}>Unsort</MenuItem>\n                        <MenuItem value={'Asc'}>Ascending</MenuItem>\n                        <MenuItem value={'Des'}>Descending</MenuItem>\n                    </Select>\n                </Grid>\n                <Grid item xs={3}>\n                    <Button onClick={sortEmp}>Sort</Button>\n                </Grid>\n            </Grid>\n            <div style={{ height: 400, width: '100%', marginTop: '30px' }}>\n                <DataGrid\n                    rows={emp ? emp : []}\n                    columns={columns.map(column => ({\n                        ...column,\n                        disableClickEventBubbling: true\n                    }))}\n                    disableColumnMenu=\"true\"\n                />\n            </div>\n        </>\n    );\n};\n\nexport default Employees;\n","/home/shrey2809/MERN/frontend/src/components/Application.js",["137","138","139","140","141","142"],"import { React, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { signerror, signnoerror } from './LoginSlice';\nimport api from '../utils/apiCalls';\nimport MyAlert from './MyAlert';\n\nimport Button from '@material-ui/core/Button';\nimport { DataGrid } from '@material-ui/data-grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst Application = props => {\n    const { jobId } = (props.location && props.location.state) || {};\n    const dispatch = useDispatch();\n    const loggedIn = useSelector(state => state.login.isAuthenticated);\n    const error = useSelector(state => state.login.error);\n    const [app, setApp] = useState(undefined);\n\n    const [change, setChange] = useState(false);\n    const [sorts, setSort] = useState({\n        sortName: '',\n        sortRating: '',\n        sortDate: ''\n    });\n\n    function getName(params) {\n        return params.getValue('applicant').name;\n    }\n\n    function getEducation(params) {\n        const eds = params.getValue('applicant').education;\n        return (\n            <List dense style={{ marginBottom: '0px' }}>\n                {eds.map(sk => (\n                    <ListItemText\n                        primary={`${sk.institute}, ${sk.startYear}, ${sk.endYear}`}\n                    />\n                ))}\n            </List>\n        );\n    }\n\n    function getSkills(params) {\n        return params.getValue('applicant').skill;\n    }\n\n    function getRating(params) {\n        return params.getValue('applicant').avgRating;\n    }\n\n    function getDate(params) {\n        var localDate = new Date(params.getValue('date'));\n        return localDate.toDateString();\n    }\n\n    const changeStatus = async (id, changedState) => {\n        try {\n            const response = await api.patch(`/api/applications/${id}`, {\n                body: { status: changedState }\n            });\n            dispatch(signnoerror());\n            setSort({\n                sortName: '',\n                sortRating: '',\n                sortDate: ''\n            });\n            setChange(!change);\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    // function renderRate(id) {\n    //     setOpen(true);\n    //     setRate('3');\n    //     var appEle = emp.filter(el => {\n    //         return el.id === id;\n    //     });\n    //     setId(appEle[0].applicant._id);\n    // }\n\n    function acceptButton(params) {\n        const stat = params.getValue('status');\n        if (stat === 'Applied') {\n            return (\n                <strong>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"small\"\n                        onClick={() => changeStatus(params.getValue('id'), 'Shortlisted')}\n                        style={{ marginLeft: 16 }}\n                    >\n                        Shortlist\n                    </Button>\n                </strong>\n            );\n        } else {\n            return (\n                <strong>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"small\"\n                        disabled={stat !== 'Shortlisted' ? true : false}\n                        onClick={() => changeStatus(params.getValue('id'), 'Accepted')}\n                        style={{ marginLeft: 16 }}\n                    >\n                        Accept\n                    </Button>\n                </strong>\n            );\n        }\n    }\n\n    function rejectButton(params) {\n        const stat = params.getValue('status');\n        return (\n            <strong>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    size=\"small\"\n                    disabled={stat === 'Accepted' || stat === 'Rejected' ? true : false}\n                    onClick={() => changeStatus(params.getValue('id'), 'Rejected')}\n                    style={{ marginLeft: 16 }}\n                >\n                    Reject\n                </Button>\n            </strong>\n        );\n    }\n\n    const columns = [\n        {\n            field: 'name',\n            headerName: 'Name',\n            width: 170,\n            valueGetter: getName,\n            sortable: false\n        },\n        {\n            field: 'date',\n            headerName: 'Date of Applying',\n            width: 170,\n            valueFormatter: getDate,\n            sortable: false\n        },\n        {\n            field: 'status',\n            headerName: 'Status',\n            width: 130,\n            sortable: false\n        },\n        {\n            field: 'sop',\n            headerName: 'SOP',\n            width: 340,\n            sortable: false\n        },\n        {\n            field: 'avgRating',\n            headerName: 'Rating',\n            valueGetter: getRating,\n            width: 100,\n            sortable: false\n        },\n        {\n            field: 'education',\n            headerName: 'Education',\n            valueFormatter: getEducation,\n            renderCell: getEducation,\n            width: 200,\n            sortable: false\n        },\n        {\n            field: 'skill',\n            headerName: 'Skills',\n            valueFormatter: getSkills,\n            width: 350,\n            sortable: false\n        },\n        {\n            field: 'accept',\n            headerName: 'Accept',\n            renderCell: acceptButton,\n            width: 130,\n            sortable: false\n        },\n        {\n            field: 'reject',\n            headerName: 'Reject',\n            renderCell: rejectButton,\n            width: 130,\n            sortable: false\n        }\n    ];\n\n    const getJobApp = async () => {\n        try {\n            const res = await axios.get(`api/recruiter/${jobId}`);\n            let result = res.data.data.data;\n            result.forEach(a => {\n                a.id = a._id;\n            });\n            setApp(result);\n            dispatch(signnoerror());\n        } catch (err) {\n            const message = err.response.data.errors[0].msg;\n            dispatch(signerror({ message }));\n            console.error(err);\n        }\n    };\n\n    const sortApp = e => {\n        let apsss = [...app];\n        apsss.sort((app1, app2) => {\n            if (sorts.sortName) {\n                if (app1.applicant.name < app2.applicant.name)\n                    return sorts.sortName === 'Asc' ? -1 : 1;\n                if (app1.applicant.name > app2.applicant.name)\n                    return sorts.sortName === 'Asc' ? 1 : -1;\n            }\n\n            if (sorts.sortRating) {\n                if (app1.applicant.avgRating < app2.applicant.avgRating)\n                    return sorts.sortRating === 'Asc' ? -1 : 1;\n                if (app1.applicant.avgRating > app2.applicant.avgRating)\n                    return sorts.sortRating === 'Asc' ? 1 : -1;\n            }\n\n            if (sorts.sortDate) {\n                if (app1.date < app2.date) return sorts.sortDate === 'Asc' ? -1 : 1;\n                if (app1.date > app2.date) return sorts.sortDate === 'Asc' ? 1 : -1;\n            }\n        });\n        setApp(apsss);\n    };\n\n    // const rateChange = e => {\n    //     setRate(e.target.value);\n    // };\n\n    const sortsChange = e => {\n        setSort({\n            ...sorts,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const history = useHistory();\n\n    useEffect(() => {\n        if (!loggedIn) history.push('/login');\n        else getJobApp();\n    }, [loggedIn, change]);\n\n    if (!app) {\n        return <h1>loading</h1>;\n    }\n\n    return (\n        <>\n            {error && <MyAlert />}\n            {/* <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n                fullWidth\n            >\n                <DialogTitle id=\"form-dialog-title\">RATE</DialogTitle>\n                <DialogContent>\n                    <FormControl component=\"fieldset\">\n                        <RadioGroup\n                            aria-label=\"rate\"\n                            name=\"rate\"\n                            value={rate}\n                            onChange={rateChange}\n                        >\n                            <FormControlLabel value=\"1\" control={<Radio />} label=\"1\" />\n                            <FormControlLabel value=\"2\" control={<Radio />} label=\"2\" />\n                            <FormControlLabel value=\"3\" control={<Radio />} label=\"3\" />\n                            <FormControlLabel value=\"4\" control={<Radio />} label=\"4\" />\n                            <FormControlLabel value=\"5\" control={<Radio />} label=\"5\" />\n                        </RadioGroup>\n                    </FormControl>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={rateEmp} color=\"primary\">\n                        Rate\n                    </Button>\n                </DialogActions>\n            </Dialog> */}\n            <Grid container spacing={5} style={{ marginTop: '20px' }}>\n                <Grid item xs={3}>\n                    <InputLabel id=\"sortName\">Sort Name:</InputLabel>\n                    <Select\n                        labelId=\"sortName\"\n                        id=\"sortName\"\n                        value={sorts.sortName}\n                        onChange={sortsChange}\n                        name=\"sortName\"\n                        style={{ width: '100%' }}\n                    >\n                        <MenuItem value={''}>Unsort</MenuItem>\n                        <MenuItem value={'Asc'}>Ascending</MenuItem>\n                        <MenuItem value={'Des'}>Descending</MenuItem>\n                    </Select>\n                </Grid>\n                <Grid item xs={3}>\n                    <InputLabel id=\"sortRating\">Sort Rating:</InputLabel>\n                    <Select\n                        labelId=\"sortRating\"\n                        id=\"sortRating\"\n                        value={sorts.sortRating}\n                        onChange={sortsChange}\n                        name=\"sortRating\"\n                        style={{ width: '100%' }}\n                    >\n                        <MenuItem value={''}>Unsort</MenuItem>\n                        <MenuItem value={'Asc'}>Ascending</MenuItem>\n                        <MenuItem value={'Des'}>Descending</MenuItem>\n                    </Select>\n                </Grid>\n                <Grid item xs={3}>\n                    <InputLabel id=\"sortDate\">Sort Date of Applying:</InputLabel>\n                    <Select\n                        labelId=\"sortDate\"\n                        id=\"sortDate\"\n                        value={sorts.sortDate}\n                        onChange={sortsChange}\n                        name=\"sortDate\"\n                        style={{ width: '100%' }}\n                    >\n                        <MenuItem value={''}>Unsort</MenuItem>\n                        <MenuItem value={'Asc'}>Ascending</MenuItem>\n                        <MenuItem value={'Des'}>Descending</MenuItem>\n                    </Select>\n                </Grid>\n                <Grid item xs={3}>\n                    <Button onClick={sortApp}>Sort</Button>\n                </Grid>\n            </Grid>\n            <div style={{ height: 400, width: '100%', marginTop: '30px' }}>\n                <DataGrid\n                    rows={app ? app : []}\n                    columns={columns.map(column => ({\n                        ...column,\n                        disableClickEventBubbling: true\n                    }))}\n                    disableColumnMenu=\"true\"\n                    rowHeight={100}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default Application;\n",{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":26,"column":29,"nodeType":"149","endLine":26,"endColumn":34},{"ruleId":"147","severity":1,"message":"148","line":29,"column":56,"nodeType":"149","endLine":29,"endColumn":61},{"ruleId":"147","severity":1,"message":"148","line":33,"column":29,"nodeType":"149","endLine":33,"endColumn":34},{"ruleId":"147","severity":1,"message":"148","line":36,"column":52,"nodeType":"149","endLine":36,"endColumn":57},{"ruleId":"147","severity":1,"message":"148","line":37,"column":55,"nodeType":"149","endLine":37,"endColumn":60},{"ruleId":"147","severity":1,"message":"148","line":38,"column":54,"nodeType":"149","endLine":38,"endColumn":59},{"ruleId":"147","severity":1,"message":"148","line":39,"column":53,"nodeType":"149","endLine":39,"endColumn":58},{"ruleId":"147","severity":1,"message":"148","line":40,"column":52,"nodeType":"149","endLine":40,"endColumn":57},{"ruleId":"147","severity":1,"message":"148","line":41,"column":50,"nodeType":"149","endLine":41,"endColumn":55},{"ruleId":"150","severity":1,"message":"151","line":1,"column":26,"nodeType":"152","messageId":"153","endLine":1,"endColumn":46},{"ruleId":"143","replacedBy":"154"},{"ruleId":"145","replacedBy":"155"},{"ruleId":"150","severity":1,"message":"156","line":42,"column":11,"nodeType":"152","messageId":"153","endLine":42,"endColumn":18},{"ruleId":"150","severity":1,"message":"157","line":2,"column":16,"nodeType":"152","messageId":"153","endLine":2,"endColumn":24},{"ruleId":"150","severity":1,"message":"158","line":2,"column":26,"nodeType":"152","messageId":"153","endLine":2,"endColumn":32},{"ruleId":"159","severity":1,"message":"160","line":3,"column":1,"nodeType":"161","endLine":26,"endColumn":3},{"ruleId":"143","replacedBy":"162"},{"ruleId":"145","replacedBy":"163"},{"ruleId":"150","severity":1,"message":"164","line":3,"column":10,"nodeType":"152","messageId":"153","endLine":3,"endColumn":14},{"ruleId":"150","severity":1,"message":"157","line":3,"column":16,"nodeType":"152","messageId":"153","endLine":3,"endColumn":24},{"ruleId":"150","severity":1,"message":"165","line":72,"column":19,"nodeType":"152","messageId":"153","endLine":72,"endColumn":27},{"ruleId":"166","severity":1,"message":"167","line":208,"column":8,"nodeType":"168","endLine":208,"endColumn":31,"suggestions":"169"},{"ruleId":"166","severity":1,"message":"170","line":224,"column":8,"nodeType":"168","endLine":224,"endColumn":16,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":239,"column":34,"nodeType":"174","messageId":"175","endLine":239,"endColumn":36},{"ruleId":"150","severity":1,"message":"164","line":2,"column":10,"nodeType":"152","messageId":"153","endLine":2,"endColumn":14},{"ruleId":"150","severity":1,"message":"157","line":2,"column":16,"nodeType":"152","messageId":"153","endLine":2,"endColumn":24},{"ruleId":"150","severity":1,"message":"176","line":4,"column":10,"nodeType":"152","messageId":"153","endLine":4,"endColumn":16},{"ruleId":"150","severity":1,"message":"177","line":4,"column":18,"nodeType":"152","messageId":"153","endLine":4,"endColumn":25},{"ruleId":"150","severity":1,"message":"178","line":69,"column":19,"nodeType":"152","messageId":"153","endLine":69,"endColumn":25},{"ruleId":"166","severity":1,"message":"179","line":113,"column":8,"nodeType":"168","endLine":113,"endColumn":23,"suggestions":"180"},{"ruleId":"150","severity":1,"message":"164","line":3,"column":10,"nodeType":"152","messageId":"153","endLine":3,"endColumn":14},{"ruleId":"150","severity":1,"message":"157","line":3,"column":16,"nodeType":"152","messageId":"153","endLine":3,"endColumn":24},{"ruleId":"150","severity":1,"message":"181","line":19,"column":8,"nodeType":"152","messageId":"153","endLine":19,"endColumn":17},{"ruleId":"150","severity":1,"message":"165","line":65,"column":19,"nodeType":"152","messageId":"153","endLine":65,"endColumn":27},{"ruleId":"166","severity":1,"message":"182","line":206,"column":8,"nodeType":"168","endLine":206,"endColumn":27,"suggestions":"183"},{"ruleId":"150","severity":1,"message":"164","line":3,"column":10,"nodeType":"152","messageId":"153","endLine":3,"endColumn":14},{"ruleId":"150","severity":1,"message":"157","line":3,"column":16,"nodeType":"152","messageId":"153","endLine":3,"endColumn":24},{"ruleId":"150","severity":1,"message":"184","line":8,"column":8,"nodeType":"152","messageId":"153","endLine":8,"endColumn":19},{"ruleId":"150","severity":1,"message":"185","line":21,"column":8,"nodeType":"152","messageId":"153","endLine":21,"endColumn":18},{"ruleId":"150","severity":1,"message":"165","line":89,"column":19,"nodeType":"152","messageId":"153","endLine":89,"endColumn":27},{"ruleId":"150","severity":1,"message":"165","line":104,"column":19,"nodeType":"152","messageId":"153","endLine":104,"endColumn":27},{"ruleId":"150","severity":1,"message":"165","line":119,"column":19,"nodeType":"152","messageId":"153","endLine":119,"endColumn":27},{"ruleId":"166","severity":1,"message":"186","line":340,"column":8,"nodeType":"168","endLine":340,"endColumn":26,"suggestions":"187"},{"ruleId":"150","severity":1,"message":"164","line":3,"column":10,"nodeType":"152","messageId":"153","endLine":3,"endColumn":14},{"ruleId":"150","severity":1,"message":"157","line":3,"column":16,"nodeType":"152","messageId":"153","endLine":3,"endColumn":24},{"ruleId":"150","severity":1,"message":"165","line":71,"column":19,"nodeType":"152","messageId":"153","endLine":71,"endColumn":27},{"ruleId":"172","severity":1,"message":"173","line":179,"column":33,"nodeType":"174","messageId":"175","endLine":179,"endColumn":35},{"ruleId":"166","severity":1,"message":"188","line":225,"column":8,"nodeType":"168","endLine":225,"endColumn":27,"suggestions":"189"},{"ruleId":"150","severity":1,"message":"164","line":3,"column":10,"nodeType":"152","messageId":"153","endLine":3,"endColumn":14},{"ruleId":"150","severity":1,"message":"157","line":3,"column":16,"nodeType":"152","messageId":"153","endLine":3,"endColumn":24},{"ruleId":"150","severity":1,"message":"190","line":16,"column":8,"nodeType":"152","messageId":"153","endLine":16,"endColumn":16},{"ruleId":"150","severity":1,"message":"165","line":65,"column":19,"nodeType":"152","messageId":"153","endLine":65,"endColumn":27},{"ruleId":"172","severity":1,"message":"173","line":226,"column":33,"nodeType":"174","messageId":"175","endLine":226,"endColumn":35},{"ruleId":"166","severity":1,"message":"191","line":265,"column":8,"nodeType":"168","endLine":265,"endColumn":26,"suggestions":"192"},"no-native-reassign",["193"],"no-negated-in-lhs",["194"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'getDefaultMiddleware' is defined but never used.","Identifier","unusedVar",["193"],["194"],"'history' is assigned a value but never used.","'Redirect' is defined but never used.","'Switch' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["193"],["194"],"'Link' is defined but never used.","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getAllJobs' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["195"],"React Hook useEffect has a missing dependency: 'finaljobs'. Either include it or remove the dependency array.",["196"],"array-callback-return","Array.prototype.sort() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'signin' is defined but never used.","'signout' is defined but never used.","'result' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["197"],"'FormLabel' is defined but never used.","React Hook useEffect has missing dependencies: 'getMyApps' and 'history'. Either include them or remove the dependency array.",["198"],"'Application' is defined but never used.","'Typography' is defined but never used.","React Hook useEffect has missing dependencies: 'getMyJobs' and 'history'. Either include them or remove the dependency array.",["199"],"React Hook useEffect has missing dependencies: 'getMyEmp' and 'history'. Either include them or remove the dependency array.",["200"],"'ListItem' is defined but never used.","React Hook useEffect has missing dependencies: 'getJobApp' and 'history'. Either include them or remove the dependency array.",["201"],"no-global-assign","no-unsafe-negation",{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},"Update the dependencies array to be: [loggedIn, url, change, history, getAllJobs]",{"range":"216","text":"217"},"Update the dependencies array to be: [finaljobs, search]",{"range":"218","text":"219"},"Update the dependencies array to be: [history, loggedIn, upd]",{"range":"220","text":"221"},"Update the dependencies array to be: [loggedIn, hasrate, history, getMyApps]",{"range":"222","text":"223"},"Update the dependencies array to be: [loggedIn, change, history, getMyJobs]",{"range":"224","text":"225"},"Update the dependencies array to be: [loggedIn, hasrate, history, getMyEmp]",{"range":"226","text":"227"},"Update the dependencies array to be: [loggedIn, change, history, getJobApp]",{"range":"228","text":"229"},[6169,6192],"[loggedIn, url, change, history, getAllJobs]",[6758,6766],"[finaljobs, search]",[3402,3417],"[history, loggedIn, upd]",[6045,6064],"[loggedIn, hasrate, history, getMyApps]",[9237,9255],"[loggedIn, change, history, getMyJobs]",[6721,6740],"[loggedIn, hasrate, history, getMyEmp]",[7998,8016],"[loggedIn, change, history, getJobApp]"]